{"version":3,"sources":["assets/img/empty-poster.png","assets/img/emojii-facepalm.png","services/ajaxRequest.js","services/getNowPlaying.js","services/getTMDbInfo.js","services/getOMDbInfo.js","Slider/SingleSlide/SingleSlide.js","VideoPopup/VideoPopup.js","Slider/Slider.js","Preloader/Preloader.js","ErrorFallback/ErrorFallback.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ajaxRequest","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","responseText","responseParsed","wrap","_context","prev","next","fetch","method","sent","json","abrupt","t0","console","error","stop","_x","apply","this","arguments","getNowPlaying","apiKey","updateMovies","setNowPlayingReceived","setAnswerReceived","requestTMDb","concat","Promise","all","then","_ref2","slicedToArray","nowPlayingPage1","nowPlayingPage2","nowPlayingPage1Results","results","nowPlayingPage2Results","nowPlayingResults","length","forEach","item","poster_path","poster","catch","getTMDbInfo","_callee2","movies","setFinish","promises","_context2","map","currMovie","currTMDbId","movieInfo","trailers","trailerUrl","lastTrailer","id","videos","site","key","imdb_id","trailer_url","genres","_x5","updatedMovies","_x2","_x3","_x4","getOMDbInfo","currIMDbId","requestOMDb","isNaN","imdbRating","director","Director","actors","Actors","metascore","Metascore","year","Year","SingleSlide","movie","setShowPopup","setCurrTrailerUrl","genreList","react_default","createElement","Fragment","className","name","posterSrc","emptyPoster","title","src","alt","href","onClick","e","preventDefault","currTrailerUrl","target","getAttribute","overview","VideoPopup","videoPopupContentRef","useRef","current","contains","ref","frameBorder","allow","allowFullScreen","Slider","moviesAreSorted","_useState","useState","_useState2","showPopup","_useState3","_useState4","Slider_SingleSlide_SingleSlide","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","src_VideoPopup_VideoPopup","Preloader","React","Component","ErrorFallback","ErrorIcon","App","setMovies","nowPlayingReceived","_useState5","_useState6","TMDbInfoReceived","setTMDbInfoReceived","_useState7","_useState8","OMDbInfoReceived","setOMDbInfoReceived","_useState9","_useState10","setMoviesAreSorted","_useState11","_useState12","sliderInited","setSliderInited","_useState13","_useState14","answerReceived","_useState15","_useState16","contentIsLoaded","setContentIsLoaded","TMDbAPI","useEffect","sortedMovies","sort","b","sortByRating","Swiper","effect","centeredSlides","slidesPerView","mousewheel","keyboard","slideToClickedSlide","scrollbar","el","draggable","hide","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","on","init","src_Slider_Slider","src_Preloader_Preloader","src_ErrorFallback_ErrorFallback","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21b1c4aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","module.exports = __webpack_public_path__ + \"static/media/emojii-facepalm.60420728.png\";","const ajaxRequest = async (url) => {\r\n    try {\r\n        const responseText = await fetch(url, { method: 'GET' });\r\n        const responseParsed = await responseText.json();\r\n        return responseParsed;\r\n    }\r\n    catch (error) {\r\n        return console.error('Ajax request error:', error);\r\n    }\r\n}\r\n\r\nexport default ajaxRequest;","import ajaxRequest from './ajaxRequest';\r\n\r\nconst getNowPlaying = (apiKey, updateMovies, setNowPlayingReceived, setAnswerReceived) => {\r\n    const requestTMDb = `https://api.themoviedb.org/3/movie/now_playing?region=UA&language=ru-RU&api_key=${apiKey}`;\r\n    const posterPath = `https://image.tmdb.org/t/p/original`; // lower resolution: https://image.tmdb.org/t/p/w370_and_h556_bestv2\r\n    \r\n    Promise.all([ajaxRequest(requestTMDb), ajaxRequest(`${requestTMDb}&page=2`)])\r\n        .then(([nowPlayingPage1, nowPlayingPage2]) => {\r\n            let nowPlayingPage1Results = nowPlayingPage1.results;\r\n            let nowPlayingPage2Results = nowPlayingPage2.results;\r\n            let nowPlayingResults = nowPlayingPage1Results.concat(nowPlayingPage2Results);\r\n            let apiRequestsLimit = 39; // to avoid TMDb API 40 requests limit\r\n\r\n            if (nowPlayingResults.length > apiRequestsLimit) {\r\n                nowPlayingResults.length = apiRequestsLimit;\r\n            }\r\n\r\n            nowPlayingResults.forEach((item) => {\r\n                if (item.poster_path === null) {\r\n                    item.poster = null;\r\n                }\r\n                else {\r\n                    item.poster = posterPath + item.poster_path;\r\n                }\r\n            });\r\n\r\n            return nowPlayingResults;\r\n        })\r\n        .then((nowPlayingResults) => {\r\n            updateMovies(nowPlayingResults);\r\n        })\r\n        .then(() => {\r\n            setNowPlayingReceived(true);\r\n        })\r\n        .catch(() => {\r\n            setNowPlayingReceived(false);\r\n            setAnswerReceived(true);\r\n        });\r\n}\r\n\r\nexport default getNowPlaying;","import ajaxRequest from './ajaxRequest';\r\n\r\nconst getTMDbInfo = async (apiKey, movies, updateMovies, setFinish) => {\r\n\r\n    const promises = await movies.map(async (currMovie) => {\r\n        let currTMDbId = currMovie.id;\r\n        let requestTMDb = `https://api.themoviedb.org/3/movie/${currTMDbId}?api_key=${apiKey}&append_to_response=external_ids,videos&language=ru-RU`;\r\n\r\n        const movieInfo = await ajaxRequest(requestTMDb);\r\n\r\n        let trailers = movieInfo.videos.results,\r\n            trailerUrl = '';\r\n        if (trailers.length > 0) {\r\n            let lastTrailer = trailers[trailers.length - 1];\r\n            if (lastTrailer.site === \"YouTube\") {\r\n                trailerUrl = `http://www.youtube.com/embed/${lastTrailer.key}?modestbranding=1&rel=0&showinfo=0`;\r\n            }\r\n        }\r\n\r\n        currMovie.imdb_id = movieInfo.imdb_id;\r\n        currMovie.trailer_url = trailerUrl;\r\n        currMovie.genres = movieInfo.genres;\r\n\r\n        return currMovie;\r\n    })\r\n\r\n    await Promise.all(promises)\r\n    .then((updatedMovies) => {\r\n        updateMovies(updatedMovies)\r\n    })\r\n    .then(() => {\r\n        setFinish(true)\r\n    });\r\n\r\n}\r\n\r\nexport default getTMDbInfo;","import ajaxRequest from './ajaxRequest';\r\n\r\nconst getOMDbInfo = async (apiKey, movies, updateMovies, setFinish) => {\r\n\r\n    const promises = await movies.map(async (currMovie) => {\r\n        let currIMDbId = currMovie.imdb_id;\r\n        let requestOMDb = `https://www.omdbapi.com/?i=${currIMDbId}&apikey=${apiKey}`;\r\n\r\n        const movieInfo = await ajaxRequest(requestOMDb);\r\n\r\n        if (isNaN(movieInfo.imdbRating)) { // may be \"N/A\"\r\n            movieInfo.imdbRating = '-';\r\n        }\r\n\r\n        currMovie.imdbRating = movieInfo.imdbRating;\r\n        currMovie.director = movieInfo.Director;\r\n        currMovie.actors = movieInfo.Actors;\r\n        currMovie.metascore = movieInfo.Metascore; // may be \"N/A\"\r\n        currMovie.year = movieInfo.Year;\r\n\r\n        return currMovie;\r\n    })\r\n\r\n    await Promise.all(promises)\r\n    .then((updatedMovies) => {\r\n        updateMovies(updatedMovies)\r\n    })\r\n    .then(() => {\r\n        setFinish(true)\r\n    });\r\n    \r\n}\r\n\r\nexport default getOMDbInfo;","import React from 'react';\r\nimport './SingleSlide.sass';\r\nimport emptyPoster from '../../assets/img/empty-poster.png';\r\n\r\nfunction SingleSlide({ movie, setShowPopup, setCurrTrailerUrl }) {\r\n\r\n    const genreList = (\r\n        <>\r\n            {movie.genres.map((item) =>\r\n                <div key={item.id} className=\"item__genre-element\">\r\n                    <div className={`item__genre-icon item__genre-icon--${item.id}`} />\r\n                    <div className=\"item__genre-name\" >{item.name}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n\r\n    const posterSrc = movie.poster !== null ? (\r\n        movie.poster\r\n    ) : (\r\n            emptyPoster\r\n        );\r\n    \r\n    const openVideo = (e) => {\r\n        e.preventDefault();\r\n        const currTrailerUrl = e.target.getAttribute('href');\r\n        setShowPopup(true);\r\n        setCurrTrailerUrl(currTrailerUrl);\r\n    }\r\n\r\n    return (\r\n        <div className=\"swiper-slide item\">\r\n            <div className=\"item__description item__title\">\r\n                <span>{`${movie.title} (${movie.year})`}</span>\r\n            </div>\r\n\r\n            <div className=\"item__img\">\r\n                <img src={posterSrc} alt=\"Poster\" />\r\n\r\n                <div className=\"item__shadow item__shadow--left\" />\r\n                <div className=\"item__shadow item__shadow--right\" />\r\n\r\n                <div className=\"item__description item__marks\">\r\n                    <div className=\" item__sidebar item__sidebar--imdb\">\r\n                        <span className=\"item__sidebar-title\">IMDb</span>\r\n                        <span className=\"item__sidebar-number\">{movie.imdbRating}</span>\r\n                    </div>\r\n\r\n                    {!isNaN(movie.metascore) &&\r\n                        <div className=\"item__sidebar item__sidebar--metascore\">\r\n                            <span className=\"item__sidebar-title item__sidebar-title--sm\">Критики</span>\r\n                            <span className=\"item__sidebar-number\">{movie.metascore + '%'}</span>\r\n                        </div>\r\n                    }\r\n\r\n                    {movie.trailer_url.length > 0 &&\r\n                        <div className=\"item__sidebar item__sidebar--trailer\">\r\n                            <span className=\"item__sidebar-title item__sidebar-title--sm\">Трейлер</span>\r\n                            <span className=\"item__sidebar-icon item__sidebar-icon--youtube\" />\r\n                            <a className=\"item__sidebar-link\" href={movie.trailer_url} onClick={openVideo}>Youtube</a>\r\n                        </div>\r\n                    }\r\n\r\n                    <div className=\"item__genre\">\r\n                        <div className=\"item__sidebar item__genre-box item__genre-box--sm\">\r\n                            {genreList}\r\n                        </div>\r\n                        <div className=\"item__sidebar item__genre-box item__genre-box--lg\">\r\n                            {genreList}\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item__description item__bottom\">\r\n\r\n                <div className=\"item__cast\">\r\n                    <span className=\"item__director\">\r\n                        Режиссер: <span>{movie.director}</span>\r\n                    </span>\r\n                    <span className=\"item__actors\">\r\n                        В ролях: <span>{movie.actors}</span>\r\n                    </span>\r\n                </div>\r\n\r\n                <div className=\"item__overview\">\r\n                    <span>{movie.overview}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SingleSlide;\r\n","import React, { useRef } from 'react';\r\nimport './VideoPopup.sass';\r\n\r\nfunction VideoPopup({ currTrailerUrl, setShowPopup }) {\r\n    const videoPopupContentRef = useRef();\r\n\r\n    const closePopup = (e) => {\r\n        if (videoPopupContentRef.current.contains(e.target)) {\r\n            return;\r\n        }\r\n        setShowPopup(false);\r\n    }\r\n\r\n    return (\r\n        <div className='video-popup' onClick={closePopup} >\r\n            <span className='video-popup__content' ref={videoPopupContentRef}>\r\n                <div className=\"video-popup__media\">\r\n                    <iframe \r\n                        className=\"video-popup__iframe\" \r\n                        src={currTrailerUrl} \r\n                        frameBorder=\"0\" \r\n                        allow=\"encrypted-media\"\r\n                        allowFullScreen \r\n                    />\r\n                </div>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoPopup;","import React, { useState, useEffect } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport 'swiper/dist/css/swiper.css';\r\nimport './Slider.sass';\r\n\r\nimport SingleSlide from './SingleSlide/SingleSlide';\r\nimport VideoPopup from '../VideoPopup/VideoPopup';\r\n\r\nfunction Slider({ movies, moviesAreSorted }) {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [currTrailerUrl, setCurrTrailerUrl] = useState('');\r\n\r\n    return (\r\n        <>\r\n            <div className=\"swiper-container\">\r\n                <div className=\"swiper-scrollbar\" />\r\n                <div className=\"swiper-wrapper\">\r\n                    {moviesAreSorted &&\r\n                        movies.map((item) => (\r\n                            <SingleSlide \r\n                                key={item.id} \r\n                                movie={item} \r\n                                setShowPopup={setShowPopup} \r\n                                setCurrTrailerUrl={setCurrTrailerUrl} \r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <CSSTransition\r\n                in={showPopup && currTrailerUrl.length > 0}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                mountOnEnter\r\n                unmountOnExit\r\n            >\r\n                <VideoPopup \r\n                    currTrailerUrl={currTrailerUrl} \r\n                    setShowPopup={setShowPopup} \r\n                />\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport './Preloader.sass';\r\n\r\nclass Preloader extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loader\">\r\n                <div className=\"loader__spinner\">\r\n                    <div className=\"loader__spinner-square\"  />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport './ErrorFallback.sass';\r\nimport ErrorIcon from '../assets/img/emojii-facepalm.png'\r\n\r\nfunction ErrorFallback() {\r\n    return (\r\n        <div className=\"error-fallback\">\r\n            <div className=\"error-fallback__content\">\r\n            <span className=\"error-fallback__content-text\">\r\n                Что-то не завелось <img src={ErrorIcon} className=\"error-fallback__content-icon\" alt=\"Error icon\" />\r\n            </span>\r\n            <span className=\"error-fallback__content-text\">Попробуйте перезагрузить страницу</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorFallback;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Swiper from 'swiper';\r\n\r\nimport getNowPlaying from './services/getNowPlaying';\r\nimport getTMDbInfo from './services/getTMDbInfo';\r\nimport getOMDbInfo from './services/getOMDbInfo';\r\n\r\nimport Slider from './Slider/Slider';\r\nimport Preloader from \"./Preloader/Preloader\";\r\nimport ErrorFallback from './ErrorFallback/ErrorFallback';\r\n\r\nimport './App.sass';\r\n\r\nfunction App() {\r\n    const [ movies, setMovies ] = useState([]);\r\n    const [ nowPlayingReceived, setNowPlayingReceived ] = useState(false);\r\n    const [ TMDbInfoReceived, setTMDbInfoReceived ] = useState(false);\r\n    const [ OMDbInfoReceived, setOMDbInfoReceived ] = useState(false);\r\n    const [ moviesAreSorted, setMoviesAreSorted ] = useState(false);\r\n    const [ sliderInited, setSliderInited ] = useState(false);\r\n    const [ answerReceived, setAnswerReceived ] = useState(false);\r\n    const [ contentIsLoaded, setContentIsLoaded ] = useState(false);\r\n  \r\n    const TMDbAPI = \"3b07521ea25bf66106a9525b3054c8e9\";\r\n    const OMDbAPI = \"55018c43\";\r\n\r\n    const sortByRating = () => {\r\n        const sortedMovies = [].concat(movies).sort(function (a, b) {\r\n            return a.imdbRating > b.imdbRating ? -1 : 1;\r\n        });\r\n\r\n        setMovies(sortedMovies);\r\n        setMoviesAreSorted(true);\r\n    }\r\n\r\n    const initSlider = () => {\r\n        new Swiper('.swiper-container', {\r\n            effect: 'coverflow',\r\n            centeredSlides: true,\r\n            slidesPerView: 'auto',\r\n            mousewheel: true,\r\n            keyboard: true,\r\n            slideToClickedSlide: true,\r\n            scrollbar: {\r\n                el: '.swiper-scrollbar',\r\n                draggable: true,\r\n                hide: true,\r\n              },\r\n            coverflowEffect: {\r\n                rotate: 20,\r\n                stretch: 0,\r\n                depth: 100,\r\n                modifier: 1,\r\n                slideShadows : false, // Done using CSS\r\n            },\r\n            on: {\r\n                init: function() {\r\n                    setSliderInited(true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNowPlaying(TMDbAPI, setMovies, setNowPlayingReceived, setAnswerReceived);\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if (nowPlayingReceived && movies.length) {\r\n            getTMDbInfo(TMDbAPI, movies, setMovies, setTMDbInfoReceived);\r\n        }\r\n    }, [nowPlayingReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (TMDbInfoReceived && movies.length) {\r\n            getOMDbInfo(OMDbAPI, movies, setMovies, setOMDbInfoReceived);\r\n        }\r\n    }, [TMDbInfoReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (OMDbInfoReceived && movies.length) {\r\n            sortByRating();\r\n        }\r\n    }, [OMDbInfoReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (moviesAreSorted && movies.length) {\r\n            initSlider();\r\n        }\r\n    }, [moviesAreSorted]);\r\n\r\n    useEffect(()=>{\r\n        if (sliderInited && movies.length) {\r\n            setContentIsLoaded(true);\r\n            setAnswerReceived(true);\r\n        }\r\n    }, [sliderInited]);\r\n\r\n    // eslint-disable-next-line\r\n    // useEffect(()=>{\r\n    //     console.log('-----------------------------------------------------------------');\r\n    //     console.log('nowPlayingReceived',nowPlayingReceived);\r\n    //     console.log('TMDbInfoReceived',TMDbInfoReceived);\r\n    //     console.log('moviesAreSorted',moviesAreSorted);\r\n    //     console.log('contentIsLoaded',contentIsLoaded);\r\n    //     console.log('answerReceived',answerReceived);\r\n    //     console.log(movies);\r\n    // })\r\n\r\n    return (\r\n        <>\r\n            <div className={`content ${contentIsLoaded && answerReceived ? 'content--visible' : ''}`}>\r\n                <div className=\"credentials\">\r\n                    <p>Made by Vladyslav Klymenko</p>\r\n                    <a href=\"https://www.linkedin.com/in/vladklymenko/\">LinkedIn</a>\r\n                    &nbsp;\r\n                    <a href=\"mailto:drkleem@gmail.com\">drkleem@gmail.com</a>\r\n                </div>\r\n                <Slider movies={movies} moviesAreSorted={moviesAreSorted} />\r\n            </div>\r\n\r\n            <CSSTransition\r\n                in={!contentIsLoaded && !answerReceived}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                unmountOnExit\r\n            >\r\n                <Preloader/>\r\n            </CSSTransition>\r\n\r\n            <CSSTransition\r\n                in={!contentIsLoaded && answerReceived}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                mountOnEnter\r\n                unmountOnExit\r\n            >\r\n                <ErrorFallback />\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n    \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}