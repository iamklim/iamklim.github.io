{"version":3,"sources":["assets/img/empty-poster.png","assets/img/emojii-facepalm.png","services/apiRequest.js","services/getNowPlaying.js","config.js","services/getTMDbInfo.js","services/getOMDbInfo.js","services/sortByRating.js","Preloader/Preloader.js","Slider/SingleSlide/SingleSlide.js","YoutubePlayer/YoutubePlayer.js","VideoPopup/VideoPopup.js","Slider/Slider.js","ErrorFallback/ErrorFallback.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","apiRequest","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","responseText","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","console","error","stop","_x","apply","this","arguments","getNowPlaying","setMovies","setNowPlayingReceived","onError","requestBody","requestRegion","requestLanguage","requestKey","requestTMDb","posterPath","_ref2","_ref3","nowPlayingPage1","nowPlayingPage2","nowPlayingResults","concat","Promise","all","slicedToArray","toConsumableArray","results","forEach","movie","poster_path","poster","_x2","_x3","getTMDbInfo","_callee2","movies","setTMDbInfoReceived","moviesUpdated","moviesUpdatedWithInfo","_context2","map","tmdbInfo","trailers","lastTrailer","id","videos","length","site","trailerId","key","imdb_id","genres","_x5","log","_x4","getOMDbInfo","setOMDbInfoReceived","requestOMDb","omdbInfo","imdbRating","Metascore","Year","Director","Actors","Response","isNaN","metascore","year","director","actors","sortByRating","setMoviesAreSorted","sort","b","err","Preloader","react_default","createElement","className","SingleSlide","setShowPopup","setCurrTrailerId","title","overview","genreList","Fragment","name","posterSrc","emptyPoster","movieYear","src","alt","data-trailer-id","href","onClick","e","preventDefault","currTrailerId","target","getAttribute","YoutubePlayer","onPlayerReady","event","setVolume","playVideo","loadVideo","window","YT","Player","videoId","height","width","autoplay","modestbranding","rel","showinfo","playsinline","events","onReady","useEffect","tag","document","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","VideoPopup","currTrailerUrl","videoPopupContentRef","useRef","current","contains","ref","src_YoutubePlayer_YoutubePlayer","Slider","moviesAreSorted","onInit","_useState","useState","_useState2","showPopup","_useState3","_useState4","Swiper","effect","centeredSlides","slidesPerView","mousewheel","eventsTarged","keyboard","slideToClickedSlide","scrollbar","el","draggable","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","on","init","item","Slider_SingleSlide_SingleSlide","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","src_VideoPopup_VideoPopup","ErrorFallback","ErrorIcon","App","nowPlayingReceived","_useState5","_useState6","TMDbInfoReceived","_useState7","_useState8","OMDbInfoReceived","_useState9","_useState10","_useState11","_useState12","sliderInited","setSliderInited","_useState13","_useState14","isLoading","setIsLoading","_useState15","_useState16","setError","src_Slider_Slider","src_Preloader_Preloader","src_ErrorFallback_ErrorFallback","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.2366e70f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","module.exports = __webpack_public_path__ + \"static/media/emojii-facepalm.60420728.png\";","const apiRequest = async (url) => {\r\n  try {\r\n    const responseText = await fetch(url);\r\n    return await responseText.json();\r\n  } catch (err) {\r\n    return console.error(\"Request error:\", err);\r\n  }\r\n};\r\n\r\nexport default apiRequest;\r\n","import apiRequest from \"./apiRequest\";\r\nimport {\r\n  TMDB_API_URL,\r\n  TMDB_API_KEY,\r\n  TMDB_REGION,\r\n  TMDB_LANGUAGE,\r\n  TMDB_IMAGES_URL,\r\n} from \"../config\";\r\n\r\nconst getNowPlaying = async (setMovies, setNowPlayingReceived, onError) => {\r\n  try {\r\n    const requestBody = `${TMDB_API_URL}/3/movie/now_playing`;\r\n    const requestRegion = `region=${TMDB_REGION}`;\r\n    const requestLanguage = `language=${TMDB_LANGUAGE}`;\r\n    const requestKey = `api_key=${TMDB_API_KEY}`;\r\n    const requestTMDb = `${requestBody}?${requestRegion}&${requestLanguage}&${requestKey}`;\r\n\r\n    const posterPath = `${TMDB_IMAGES_URL}/t/p/original`;\r\n\r\n    const [nowPlayingPage1, nowPlayingPage2] = await Promise.all([\r\n      apiRequest(requestTMDb),\r\n      apiRequest(`${requestTMDb}&page=2`),\r\n    ]);\r\n    const nowPlayingResults = [\r\n      ...nowPlayingPage1.results,\r\n      ...nowPlayingPage2.results,\r\n    ];\r\n\r\n    nowPlayingResults.forEach((movie) => {\r\n      if (movie.poster_path) {\r\n        movie.poster = `${posterPath}${movie.poster_path}`;\r\n      }\r\n    });\r\n\r\n    if (nowPlayingResults) {\r\n      setMovies(nowPlayingResults);\r\n      setNowPlayingReceived(true);\r\n    } else {\r\n      setNowPlayingReceived(false);\r\n      onError();\r\n    }\r\n  } catch (err) {\r\n    setNowPlayingReceived(false);\r\n    onError();\r\n  }\r\n};\r\n\r\nexport default getNowPlaying;\r\n","const TMDB_API_URL = \"https://api.themoviedb.org\";\r\nconst TMDB_API_KEY = \"3b07521ea25bf66106a9525b3054c8e9\";\r\nconst TMDB_IMAGES_URL = \"https://image.tmdb.org\"; // lower resolutions: https://image.tmdb.org/t/p/w370_and_h556_bestv2\r\nconst TMDB_REGION = \"ua\";\r\nconst TMDB_LANGUAGE = \"ru\";\r\n\r\nconst OMDB_API_URL = \"https://www.omdbapi.com\";\r\nconst OMDB_API_KEY = \"55018c43\";\r\n\r\nexport {\r\n  TMDB_API_URL,\r\n  TMDB_API_KEY,\r\n  TMDB_IMAGES_URL,\r\n  TMDB_REGION,\r\n  TMDB_LANGUAGE,\r\n  OMDB_API_URL,\r\n  OMDB_API_KEY,\r\n};\r\n","import apiRequest from \"./apiRequest\";\r\nimport { TMDB_API_URL, TMDB_API_KEY, TMDB_LANGUAGE } from \"../config\";\r\n\r\nconst getTMDbInfo = async (movies, setMovies, setTMDbInfoReceived, onError) => {\r\n  try {\r\n    const moviesUpdated = [...movies];\r\n\r\n    const requestBody = `${TMDB_API_URL}/3/movie`;\r\n    const requestKey = `api_key=${TMDB_API_KEY}`;\r\n    const requestLanguage = `language=${TMDB_LANGUAGE}`;\r\n    const requestAppend = \"append_to_response=external_ids,videos\";\r\n\r\n    const moviesUpdatedWithInfo = await Promise.all(\r\n      moviesUpdated.map(async (movie) => {\r\n        const requestTMDb = `${requestBody}/${movie.id}?${requestKey}&${requestLanguage}&${requestAppend}`;\r\n        const tmdbInfo = await apiRequest(requestTMDb);\r\n\r\n        const trailers = tmdbInfo.videos.results;\r\n\r\n        if (trailers.length > 0) {\r\n          const lastTrailer = trailers[trailers.length - 1];\r\n          if (lastTrailer.site === \"YouTube\") {\r\n            //trailerUrl = `https://www.youtube.com/embed/${lastTrailer.key}?autoplay=1&modestbranding=1&rel=0&showinfo=0`;\r\n            movie.trailerId = lastTrailer.key;\r\n          }\r\n        }\r\n\r\n        movie.imdb_id = tmdbInfo.imdb_id;\r\n        movie.genres = tmdbInfo.genres.length ? tmdbInfo.genres : null;\r\n\r\n        return movie;\r\n      })\r\n    );\r\n\r\n    if (moviesUpdatedWithInfo) {\r\n      setMovies(moviesUpdatedWithInfo);\r\n      setTMDbInfoReceived(true);\r\n    } else {\r\n      setTMDbInfoReceived(false);\r\n      onError();\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    setTMDbInfoReceived(false);\r\n    onError();\r\n  }\r\n};\r\n\r\nexport default getTMDbInfo;\r\n","import apiRequest from \"./apiRequest\";\r\nimport { OMDB_API_URL, OMDB_API_KEY } from \"../config\";\r\n\r\nconst getOMDbInfo = async (movies, setMovies, setOMDbInfoReceived, onError) => {\r\n  try {\r\n    const moviesUpdated = [...movies];\r\n    const requestKey = `apikey=${OMDB_API_KEY}`;\r\n\r\n    const moviesUpdatedWithInfo = await Promise.all(\r\n      moviesUpdated.map(async (movie) => {\r\n        movie.imdbRating = \"-\";\r\n\r\n        const requestOMDb = `${OMDB_API_URL}/?i=${movie.imdb_id}&${requestKey}`;\r\n\r\n        const omdbInfo = await apiRequest(requestOMDb);\r\n\r\n        if (omdbInfo.Response === \"True\") {\r\n          const { imdbRating, Metascore, Year, Director, Actors } = omdbInfo;\r\n\r\n          movie.imdbRating = !isNaN(imdbRating) ? imdbRating : \"-\";\r\n          movie.metascore = !isNaN(Metascore) ? Metascore : null;\r\n          movie.year = !isNaN(Year) ? Year : null;\r\n          movie.director = Director !== \"N/A\" ? Director : null;\r\n          movie.actors = Actors !== \"N/A\" ? Actors : null;\r\n        }\r\n\r\n        return movie;\r\n      })\r\n    );\r\n\r\n    if (moviesUpdatedWithInfo) {\r\n      setMovies(moviesUpdatedWithInfo);\r\n      setOMDbInfoReceived(true);\r\n    } else {\r\n      setOMDbInfoReceived(false);\r\n      onError();\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    setOMDbInfoReceived(false);\r\n    onError();\r\n  }\r\n};\r\n\r\nexport default getOMDbInfo;\r\n","const sortByRating = (movies, setMovies, setMoviesAreSorted, onError) => {\r\n  try {\r\n    const moviesUpdated = [...movies];\r\n    moviesUpdated.sort((a, b) => (a.imdbRating > b.imdbRating ? -1 : 1));\r\n    setMovies(moviesUpdated);\r\n    setMoviesAreSorted(true);\r\n  } catch (err) {\r\n    console.log(err);\r\n    setMoviesAreSorted(false);\r\n    onError();\r\n  }\r\n};\r\n\r\nexport default sortByRating;\r\n","import React from 'react';\r\nimport './Preloader.sass';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <div className=\"loader__spinner\">\r\n                <div className=\"loader__spinner-square\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport './SingleSlide.sass';\r\nimport emptyPoster from '../../assets/img/empty-poster.png';\r\n\r\nconst SingleSlide = ({ movie, setShowPopup, setCurrTrailerId }) => {\r\n\r\n    const { genres, poster, title, year, imdbRating, metascore, trailerId, director, actors, overview } = movie;\r\n    const genreList = genres ? (\r\n        <>\r\n            {genres.map(({ id, name }) => \r\n                <div key={id} className=\"item__genre-element\">\r\n                    <div className={`item__genre-icon item__genre-icon--${id}`} />\r\n                    <div className=\"item__genre-name\" >{name}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    ) : null;\r\n\r\n    const posterSrc = poster || emptyPoster;\r\n    const movieYear = year ? `(${year})` : '';\r\n    \r\n    const openVideo = (e) => {\r\n        e.preventDefault();\r\n        const currTrailerId = e.target.getAttribute('data-trailer-id');\r\n        setCurrTrailerId(currTrailerId);\r\n        setShowPopup(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"swiper-slide item\">\r\n            <div className=\"item__description item__title\">\r\n                <span>{`${title} ${movieYear}`}</span>\r\n            </div>\r\n\r\n            <div className=\"item__img\">\r\n                <img src={posterSrc} alt=\"Poster\" />\r\n\r\n                <div className=\"item__shadow item__shadow--left\" />\r\n                <div className=\"item__shadow item__shadow--right\" />\r\n\r\n                <div className=\"item__description item__marks\">\r\n                    <div className=\" item__sidebar item__sidebar--imdb\">\r\n                        <span className=\"item__sidebar-title\">IMDb</span>\r\n                        <span className=\"item__sidebar-number\">{imdbRating}</span>\r\n                    </div>\r\n\r\n                    {metascore &&\r\n                        <div className=\"item__sidebar item__sidebar--metascore\">\r\n                            <span className=\"item__sidebar-title item__sidebar-title--sm\">Критики</span>\r\n                            <span className=\"item__sidebar-number\">{`${metascore}%`}</span>\r\n                        </div>\r\n                    }\r\n\r\n                    {trailerId &&\r\n                        <div className=\"item__sidebar item__sidebar--trailer\">\r\n                            <span className=\"item__sidebar-title item__sidebar-title--sm\">Трейлер</span>\r\n                            <span className=\"item__sidebar-icon item__sidebar-icon--youtube\" />\r\n                            <a \r\n                                className=\"item__sidebar-link\"\r\n                                data-trailer-id={trailerId} \r\n                                href={`https://www.youtube.com/watch?v=${trailerId}`} \r\n                                onClick={openVideo}>\r\n                                    Youtube\r\n                            </a>\r\n                        </div>\r\n                    }\r\n\r\n                    {genreList &&\r\n                        <div className=\"item__genre\">\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--sm\">\r\n                                {genreList}\r\n                            </div>\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--lg\">\r\n                                {genreList}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item__description item__bottom\">\r\n\r\n                <div className=\"item__cast\">\r\n                    {director && \r\n                        <span className=\"item__director\">\r\n                            Режиссер: <span>{director}</span>\r\n                        </span>\r\n                    }\r\n                    {actors &&\r\n                        <span className=\"item__actors\">\r\n                            В ролях: <span>{actors}</span>\r\n                        </span>\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"item__overview\">\r\n                    <span>{overview}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SingleSlide;","import React, { useEffect } from \"react\";\r\nimport \"./YoutubePlayer.sass\";\r\n\r\nconst YoutubePlayer = ({ id }) => {\r\n  const onPlayerReady = (event) => {\r\n    event.target.setVolume(100);\r\n    event.target.playVideo();\r\n  };\r\n\r\n  const loadVideo = () => {\r\n    // the Player object is created uniquely based on the id in props\r\n    new window.YT.Player(`youtube-player-${id}`, {\r\n      videoId: id,\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      autoplay: 1,\r\n      modestbranding: 1,\r\n      rel: 0,\r\n      showinfo: 0,\r\n      playsinline: 1,\r\n      events: {\r\n        onReady: onPlayerReady,\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // On mount, check to see if the API script is already loaded\r\n    if (!window.YT) {\r\n      // If not, load the script asynchronously\r\n      const tag = document.createElement(\"script\");\r\n      tag.src = \"https://www.youtube.com/iframe_api\";\r\n\r\n      // onYouTubeIframeAPIReady will load the video after the script is loaded\r\n      window.onYouTubeIframeAPIReady = loadVideo;\r\n\r\n      const firstScriptTag = document.getElementsByTagName(\"script\")[0];\r\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n    } else {\r\n      // If script is already there, load the video directly\r\n      loadVideo();\r\n    }\r\n  }, []);\r\n\r\n  return <div id={`youtube-player-${id}`} />;\r\n};\r\n\r\nexport default YoutubePlayer;\r\n","import React, { useRef } from \"react\";\r\nimport \"./VideoPopup.sass\";\r\nimport YoutubePlayer from \"../YoutubePlayer/YoutubePlayer\";\r\n\r\nconst VideoPopup = ({ currTrailerUrl, setShowPopup }) => {\r\n  const videoPopupContentRef = useRef();\r\n\r\n  const closePopup = (e) => {\r\n    if (videoPopupContentRef.current.contains(e.target)) {\r\n      return;\r\n    }\r\n    setShowPopup(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"video-popup\" onClick={closePopup}>\r\n      <span className=\"video-popup__content\" ref={videoPopupContentRef}>\r\n        <div className=\"video-popup__media\">\r\n          <YoutubePlayer id={currTrailerUrl} />\r\n        </div>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPopup;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport Swiper from \"swiper\";\r\n\r\nimport \"swiper/dist/css/swiper.css\";\r\nimport \"./Slider.sass\";\r\n\r\nimport SingleSlide from \"./SingleSlide/SingleSlide\";\r\nimport VideoPopup from \"../VideoPopup/VideoPopup\";\r\n\r\nconst Slider = ({ movies, moviesAreSorted, onInit }) => {\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [currTrailerId, setCurrTrailerId] = useState(\"\");\r\n\r\n  const initSlider = () => {\r\n    new Swiper(\".swiper-container\", {\r\n      effect: \"coverflow\",\r\n      centeredSlides: true,\r\n      slidesPerView: \"auto\",\r\n      mousewheel: {\r\n        eventsTarged: \".item__img\",\r\n      },\r\n      keyboard: true,\r\n      slideToClickedSlide: true,\r\n      scrollbar: {\r\n        el: \".swiper-scrollbar\",\r\n        draggable: true,\r\n      },\r\n      coverflowEffect: {\r\n        rotate: 20,\r\n        stretch: 0,\r\n        depth: 100,\r\n        modifier: 1,\r\n        slideShadows: false, // Done using CSS\r\n      },\r\n      on: {\r\n        init: () => {\r\n          onInit(true);\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (moviesAreSorted) {\r\n      initSlider();\r\n    }\r\n  }, [moviesAreSorted]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"swiper-container\">\r\n        <div className=\"swiper-scrollbar\" />\r\n        <div className=\"swiper-wrapper\">\r\n          {moviesAreSorted &&\r\n            movies.map((item) => (\r\n              <SingleSlide\r\n                key={item.id}\r\n                movie={item}\r\n                setShowPopup={setShowPopup}\r\n                setCurrTrailerId={setCurrTrailerId}\r\n              />\r\n            ))}\r\n        </div>\r\n      </div>\r\n\r\n      <CSSTransition\r\n        in={showPopup && currTrailerId.length > 0}\r\n        timeout={500}\r\n        classNames=\"animation\"\r\n        mountOnEnter\r\n        unmountOnExit\r\n      >\r\n        <VideoPopup\r\n          currTrailerUrl={currTrailerId}\r\n          setShowPopup={setShowPopup}\r\n        />\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport './ErrorFallback.sass';\r\nimport ErrorIcon from '../assets/img/emojii-facepalm.png'\r\n\r\nconst ErrorFallback = () => {\r\n    return (\r\n        <div className=\"error-fallback\">\r\n            <div className=\"error-fallback__content\">\r\n            <span className=\"error-fallback__content-text\">\r\n                Что-то не завелось <img src={ErrorIcon} className=\"error-fallback__content-icon\" alt=\"Error icon\" />\r\n            </span>\r\n            <span className=\"error-fallback__content-text\">Попробуйте перезагрузить страницу</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorFallback;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport \"./App.sass\";\r\n\r\nimport getNowPlaying from \"./services/getNowPlaying\";\r\nimport getTMDbInfo from \"./services/getTMDbInfo\";\r\nimport getOMDbInfo from \"./services/getOMDbInfo\";\r\nimport sortByRating from \"./services/sortByRating\";\r\n\r\nimport Preloader from \"./Preloader/Preloader\";\r\nimport Slider from \"./Slider/Slider\";\r\nimport ErrorFallback from \"./ErrorFallback/ErrorFallback\";\r\n\r\nconst App = () => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [nowPlayingReceived, setNowPlayingReceived] = useState(false);\r\n  const [TMDbInfoReceived, setTMDbInfoReceived] = useState(false);\r\n  const [OMDbInfoReceived, setOMDbInfoReceived] = useState(false);\r\n  const [moviesAreSorted, setMoviesAreSorted] = useState(false);\r\n  const [sliderInited, setSliderInited] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const onError = () => {\r\n    setIsLoading(false);\r\n    setError(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getNowPlaying(setMovies, setNowPlayingReceived, onError);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (nowPlayingReceived) {\r\n      getTMDbInfo(movies, setMovies, setTMDbInfoReceived, onError);\r\n    }\r\n  }, [nowPlayingReceived]);\r\n\r\n  useEffect(() => {\r\n    if (TMDbInfoReceived) {\r\n      getOMDbInfo(movies, setMovies, setOMDbInfoReceived, onError);\r\n    }\r\n  }, [TMDbInfoReceived]);\r\n\r\n  useEffect(() => {\r\n    if (OMDbInfoReceived) {\r\n      sortByRating(movies, setMovies, setMoviesAreSorted, onError);\r\n    }\r\n  }, [OMDbInfoReceived]);\r\n\r\n  useEffect(() => {\r\n    if (sliderInited) {\r\n      setIsLoading(false);\r\n    }\r\n  }, [sliderInited]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={`content ${!isLoading && !error ? \"content--visible\" : \"\"}`}\r\n      >\r\n        <div className=\"content__credentials\">\r\n          <p>Made by Vladyslav Klymenko</p>\r\n          <a href=\"https://www.linkedin.com/in/vladklymenko/\">linkedIn</a>\r\n          &nbsp;\r\n          <a href=\"mailto:drkleem@gmail.com\">drkleem@gmail.com</a>\r\n        </div>\r\n\r\n        <Slider\r\n          movies={movies}\r\n          moviesAreSorted={moviesAreSorted}\r\n          onInit={setSliderInited}\r\n        />\r\n      </div>\r\n\r\n      <CSSTransition\r\n        in={isLoading && !error}\r\n        timeout={500}\r\n        classNames=\"animation\"\r\n        unmountOnExit\r\n      >\r\n        <Preloader />\r\n      </CSSTransition>\r\n\r\n      <CSSTransition\r\n        in={!isLoading && error}\r\n        timeout={500}\r\n        classNames=\"animation\"\r\n        mountOnEnter\r\n        unmountOnExit\r\n      >\r\n        <ErrorFallback />\r\n      </CSSTransition>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}