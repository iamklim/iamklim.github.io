{"version":3,"sources":["assets/img/empty-poster.png","assets/img/emojii-facepalm.png","services/ajaxRequest.js","apiKeys.js","services/getNowPlaying.js","services/getTMDbInfo.js","services/getOMDbInfo.js","services/sortByRating.js","Preloader/Preloader.js","Slider/SingleSlide/SingleSlide.js","YoutubePlayer/YoutubePlayer.js","VideoPopup/VideoPopup.js","Slider/Slider.js","ErrorFallback/ErrorFallback.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","ajaxRequest","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","responseText","responseParsed","wrap","_context","prev","next","fetch","method","sent","json","abrupt","t0","console","error","stop","_x","apply","this","arguments","tmdbApiKey","getNowPlaying","region","userLanguage","updateMovies","setNowPlayingReceived","setAnswerReceived","requestRegion","concat","requestLanguage","requestKey","requestTMDb","Promise","all","then","_ref2","slicedToArray","nowPlayingPage1","nowPlayingPage2","nowPlayingPage1Results","results","nowPlayingPage2Results","nowPlayingResults","length","forEach","item","poster_path","poster","catch","getTMDbInfo","_callee2","movies","browserLanguage","setFinish","promises","_context2","map","currMovie","requestId","movieInfo","trailers","lastTrailer","id","videos","site","trailerId","key","imdb_id","genres","_x5","updatedMovies","_x2","_x3","_x4","getOMDbInfo","allSettled","resolve","value","state","reason","requestOMDb","moviesUpdated","index","referredMovie","imdbRating","status","Response","Metascore","Year","Director","Actors","isNaN","metascore","year","director","actors","sortByRating","sort","b","Preloader","react_default","createElement","className","SingleSlide","movie","setShowPopup","setCurrTrailerId","title","overview","genreList","Fragment","name","posterSrc","emptyPoster","movieYear","src","alt","data-trailer-id","href","onClick","e","preventDefault","currTrailerId","target","getAttribute","YoutubePlayer","useEffect","window","YT","loadVideo","tag","document","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","Player","videoId","height","width","autoplay","modestbranding","rel","showinfo","playsinline","events","onReady","onPlayerReady","event","setVolume","playVideo","VideoPopup","currTrailerUrl","videoPopupContentRef","useRef","current","contains","ref","src_YoutubePlayer_YoutubePlayer","Slider","moviesAreSorted","onInit","_useState","useState","_useState2","showPopup","_useState3","_useState4","Swiper","effect","centeredSlides","slidesPerView","mousewheel","eventsTarged","keyboard","slideToClickedSlide","scrollbar","el","draggable","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","on","init","Slider_SingleSlide_SingleSlide","CSSTransition","in","timeout","classNames","mountOnEnter","unmountOnExit","src_VideoPopup_VideoPopup","ErrorFallback","ErrorIcon","App","setMovies","nowPlayingReceived","_useState5","_useState6","TMDbInfoReceived","setTMDbInfoReceived","_useState7","_useState8","OMDbInfoReceived","setOMDbInfoReceived","_useState9","_useState10","setMoviesAreSorted","_useState11","_useState12","sliderInited","setSliderInited","_useState13","_useState14","answerReceived","_useState15","_useState16","contentIsLoaded","setContentIsLoaded","_useState17","_useState18","_useState19","_useState20","language","didMount","sortedMovies","src_Slider_Slider","src_Preloader_Preloader","src_ErrorFallback_ErrorFallback","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.7f955c29.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","module.exports = __webpack_public_path__ + \"static/media/emojii-facepalm.60420728.png\";","const ajaxRequest = async (url) => {\r\n    try {\r\n        const responseText = await fetch(url, { method: 'GET' });\r\n        const responseParsed = await responseText.json();\r\n        return responseParsed;\r\n    }\r\n    catch (error) {\r\n        return console.error('Ajax request error:', error);\r\n    }\r\n}\r\n\r\nexport default ajaxRequest;","const tmdbApiKey = '3b07521ea25bf66106a9525b3054c8e9';\r\nconst omdbApiKey = '55018c43';\r\n\r\nexport { tmdbApiKey, omdbApiKey };","import ajaxRequest from './ajaxRequest';\r\nimport { tmdbApiKey } from '../apiKeys';\r\n\r\nconst getNowPlaying = (region, userLanguage, updateMovies, setNowPlayingReceived, setAnswerReceived) => {\r\n\r\n    const apiRequestsLimit = 39; // to avoid TMDb API 40 requests limit\r\n\r\n    const requestBody = 'https://api.themoviedb.org/3/movie/now_playing';\r\n    const requestRegion = `region=${region}`;\r\n    const requestLanguage = `language=${userLanguage}`;\r\n    const requestKey = `api_key=${tmdbApiKey}`;\r\n    const requestTMDb = `${requestBody}?${requestRegion}&${requestLanguage}&${requestKey}`;\r\n\r\n    const posterPath = 'https://image.tmdb.org/t/p/original'; // lower resolution: https://image.tmdb.org/t/p/w370_and_h556_bestv2\r\n    \r\n    Promise.all([ajaxRequest(requestTMDb), ajaxRequest(`${requestTMDb}&page=2`)])\r\n        .then(([nowPlayingPage1, nowPlayingPage2]) => {\r\n            let nowPlayingPage1Results = nowPlayingPage1.results;\r\n            let nowPlayingPage2Results = nowPlayingPage2.results;\r\n            let nowPlayingResults = nowPlayingPage1Results.concat(nowPlayingPage2Results);\r\n            \r\n            if (nowPlayingResults.length > apiRequestsLimit) {\r\n                nowPlayingResults.length = apiRequestsLimit;\r\n            }\r\n\r\n            nowPlayingResults.forEach((item) => {\r\n                if (item.poster_path) {\r\n                    item.poster = posterPath + item.poster_path;\r\n                }\r\n            });\r\n\r\n            return nowPlayingResults;\r\n        })\r\n        .then((nowPlayingResults) => {\r\n            if (nowPlayingResults.length) {\r\n                updateMovies(nowPlayingResults);\r\n                setNowPlayingReceived(true);\r\n            }\r\n            else {\r\n                setNowPlayingReceived(false);\r\n                setAnswerReceived(true);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            setNowPlayingReceived(false);\r\n            setAnswerReceived(true);\r\n        });\r\n}\r\n\r\nexport default getNowPlaying;","import ajaxRequest from './ajaxRequest';\r\nimport { tmdbApiKey } from '../apiKeys';\r\n\r\nconst getTMDbInfo = async (movies, browserLanguage, updateMovies, setFinish) => {\r\n    const promises = await movies.map(async (currMovie) => {\r\n\r\n        const requestBody = 'https://api.themoviedb.org/3/movie';\r\n        const requestId = currMovie.id;\r\n        const requestKey = `api_key=${tmdbApiKey}`;\r\n        const requestLanguage = `language=${browserLanguage}`;\r\n        const requestAppend = 'append_to_response=external_ids,videos';\r\n        const requestTMDb = `${requestBody}/${requestId}?${requestKey}&${requestLanguage}&${requestAppend}`;\r\n\r\n        const movieInfo = await ajaxRequest(requestTMDb);\r\n\r\n        let trailers = movieInfo.videos.results;\r\n\r\n        if (trailers.length > 0) {\r\n            let lastTrailer = trailers[trailers.length - 1];\r\n            if (lastTrailer.site === \"YouTube\") {\r\n                //trailerUrl = `https://www.youtube.com/embed/${lastTrailer.key}?autoplay=1&modestbranding=1&rel=0&showinfo=0`;\r\n                currMovie.trailerId = lastTrailer.key;\r\n            }\r\n        }\r\n\r\n        currMovie.imdb_id = movieInfo.imdb_id;\r\n        currMovie.genres = movieInfo.genres.length ? movieInfo.genres : null;\r\n\r\n        return currMovie;\r\n        \r\n    })\r\n\r\n    await Promise.all(promises)\r\n    .then((updatedMovies) => {\r\n        updateMovies(updatedMovies)\r\n    })\r\n    .then(() => {\r\n        setFinish(true)\r\n    });\r\n\r\n}\r\n\r\nexport default getTMDbInfo;","import ajaxRequest from './ajaxRequest';\r\nimport { omdbApiKey } from '../apiKeys';\r\n\r\nconst getOMDbInfo = (movies, updateMovies, setFinish) => {\r\n\r\n    // Promise.allSettled polyfill\r\n    if (!Promise.allSettled) {\r\n        Promise.allSettled = function(promises) {\r\n            return Promise.all(promises.map(p => Promise.resolve(p).then(value => ({\r\n                state: 'fulfilled',\r\n                value: value\r\n            }), error => ({\r\n                state: 'rejected',\r\n                reason: error\r\n            }))));\r\n        };\r\n    }\r\n\r\n    Promise.allSettled(movies.map(currMovie => {\r\n        const requestBody = 'https://www.omdbapi.com';\r\n        const requestId = `i=${currMovie.imdb_id}`;\r\n        const requestKey = `apikey=${omdbApiKey}`;\r\n        const requestOMDb = `${requestBody}/?${requestId}&${requestKey}`;\r\n\r\n        return ajaxRequest(requestOMDb);\r\n    }))\r\n    .then(results => {\r\n        const moviesUpdated = movies;\r\n\r\n        results.map((item, index) => {\r\n            const referredMovie = moviesUpdated[index];\r\n            referredMovie.imdbRating = '-';\r\n\r\n            if (item.status === \"fulfilled\" && typeof item.value !== 'undefined') {\r\n                const { value } = item;\r\n                if (value.Response === \"True\") {\r\n                    const { imdbRating, Metascore, Year, Director, Actors} = value;\r\n                \r\n                    if (!isNaN(imdbRating)) referredMovie.imdbRating = imdbRating;\r\n                    referredMovie.metascore = !isNaN(Metascore) ? Metascore : null;\r\n                    referredMovie.year = !isNaN(Year) ? Year : null;\r\n                    referredMovie.director = Director !== 'N/A' ? Director : null;\r\n                    referredMovie.actors = Actors !== 'N/A' ? Actors : null;\r\n                }\r\n            }\r\n            return referredMovie;\r\n        });\r\n\r\n        return moviesUpdated;\r\n    })\r\n    .then(moviesUpdated => {\r\n        updateMovies(moviesUpdated);\r\n        setFinish(true);\r\n    });\r\n    \r\n    // const promises = await movies.map(async (currMovie) => {\r\n\r\n    //     const requestBody = 'https://www.omdbapi.com';\r\n    //     const requestId = `i=${currMovie.imdb_id}`;\r\n    //     const requestKey = `apikey=${omdbApiKey}`;\r\n    //     const requestOMDb = `${requestBody}/?${requestId}&${requestKey}`;\r\n\r\n    //     const movieInfo = await ajaxRequest(requestOMDb);\r\n\r\n    //     currMovie.imdbRating = !isNaN(movieInfo.imdbRating) ? movieInfo.imdbRating : '-';\r\n    //     currMovie.metascore = !isNaN(movieInfo.Metascore) ? movieInfo.Metascore : null;\r\n    //     currMovie.year = !isNaN(movieInfo.Year) ? movieInfo.Year : null;\r\n    //     currMovie.director = movieInfo.Director !== 'N/A' ? movieInfo.Director : null;\r\n    //     currMovie.actors = movieInfo.Actors !== 'N/A' ? movieInfo.Actors : null;\r\n        \r\n    //     return currMovie;\r\n    // })\r\n\r\n    // await Promise.all(promises)\r\n    // .then((updatedMovies) => {\r\n    //     updateMovies(updatedMovies)\r\n    // })\r\n    // .then(() => {\r\n    //     setFinish(true)\r\n    // });\r\n\r\n    // const promises = await movies.map(async (currMovie) => {\r\n\r\n    //     const requestBody = 'https://www.omdbapi.com';\r\n    //     const requestId = `i=${currMovie.imdb_id}`;\r\n    //     const requestKey = `apikey=${omdbApiKey}`;\r\n    //     const requestOMDb = `${requestBody}/?${requestId}&${requestKey}`;\r\n\r\n    //     const movieInfo = await ajaxRequest(requestOMDb);\r\n\r\n    //     currMovie.imdbRating = !isNaN(movieInfo.imdbRating) ? movieInfo.imdbRating : '-';\r\n    //     currMovie.metascore = !isNaN(movieInfo.Metascore) ? movieInfo.Metascore : null;\r\n    //     currMovie.year = !isNaN(movieInfo.Year) ? movieInfo.Year : null;\r\n    //     currMovie.director = movieInfo.Director !== 'N/A' ? movieInfo.Director : null;\r\n    //     currMovie.actors = movieInfo.Actors !== 'N/A' ? movieInfo.Actors : null;\r\n        \r\n    //     return currMovie;\r\n    // })\r\n\r\n    // await Promise.all(promises)\r\n    // .then((updatedMovies) => {\r\n    //     updateMovies(updatedMovies)\r\n    // })\r\n    // .then(() => {\r\n    //     setFinish(true)\r\n    // });\r\n    \r\n}\r\n\r\nexport default getOMDbInfo;","const sortByRating = movies => {\r\n    return [].concat(movies).sort((a, b) => \r\n        a.imdbRating > b.imdbRating ? -1 : 1\r\n    );\r\n}\r\n\r\nexport default sortByRating;","import React from 'react';\r\nimport './Preloader.sass';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <div className=\"loader__spinner\">\r\n                <div className=\"loader__spinner-square\" />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport './SingleSlide.sass';\r\nimport emptyPoster from '../../assets/img/empty-poster.png';\r\n\r\nconst SingleSlide = ({ movie, setShowPopup, setCurrTrailerId }) => {\r\n\r\n    const { genres, poster, title, year, imdbRating, metascore, trailerId, director, actors, overview } = movie;\r\n    const genreList = genres ? (\r\n        <>\r\n            {genres.map(({ id, name }) => \r\n                <div key={id} className=\"item__genre-element\">\r\n                    <div className={`item__genre-icon item__genre-icon--${id}`} />\r\n                    <div className=\"item__genre-name\" >{name}</div>\r\n                </div>\r\n            )}\r\n        </>\r\n    ) : null;\r\n\r\n    const posterSrc = poster || emptyPoster;\r\n    const movieYear = year ? `(${year})` : '';\r\n    \r\n    const openVideo = (e) => {\r\n        e.preventDefault();\r\n        const currTrailerId = e.target.getAttribute('data-trailer-id');\r\n        setCurrTrailerId(currTrailerId);\r\n        setShowPopup(true);\r\n    }\r\n\r\n    return (\r\n        <div className=\"swiper-slide item\">\r\n            <div className=\"item__description item__title\">\r\n                <span>{`${title} ${movieYear}`}</span>\r\n            </div>\r\n\r\n            <div className=\"item__img\">\r\n                <img src={posterSrc} alt=\"Poster\" />\r\n\r\n                <div className=\"item__shadow item__shadow--left\" />\r\n                <div className=\"item__shadow item__shadow--right\" />\r\n\r\n                <div className=\"item__description item__marks\">\r\n                    <div className=\" item__sidebar item__sidebar--imdb\">\r\n                        <span className=\"item__sidebar-title\">IMDb</span>\r\n                        <span className=\"item__sidebar-number\">{imdbRating}</span>\r\n                    </div>\r\n\r\n                    {metascore &&\r\n                        <div className=\"item__sidebar item__sidebar--metascore\">\r\n                            <span className=\"item__sidebar-title item__sidebar-title--sm\">Критики</span>\r\n                            <span className=\"item__sidebar-number\">{`${metascore}%`}</span>\r\n                        </div>\r\n                    }\r\n\r\n                    {trailerId &&\r\n                        <div className=\"item__sidebar item__sidebar--trailer\">\r\n                            <span className=\"item__sidebar-title item__sidebar-title--sm\">Трейлер</span>\r\n                            <span className=\"item__sidebar-icon item__sidebar-icon--youtube\" />\r\n                            <a \r\n                                className=\"item__sidebar-link\"\r\n                                data-trailer-id={trailerId} \r\n                                href={`https://www.youtube.com/watch?v=${trailerId}`} \r\n                                onClick={openVideo}>\r\n                                    Youtube\r\n                            </a>\r\n                        </div>\r\n                    }\r\n\r\n                    {genreList &&\r\n                        <div className=\"item__genre\">\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--sm\">\r\n                                {genreList}\r\n                            </div>\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--lg\">\r\n                                {genreList}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"item__description item__bottom\">\r\n\r\n                <div className=\"item__cast\">\r\n                    {director && \r\n                        <span className=\"item__director\">\r\n                            Режиссер: <span>{director}</span>\r\n                        </span>\r\n                    }\r\n                    {actors &&\r\n                        <span className=\"item__actors\">\r\n                            В ролях: <span>{actors}</span>\r\n                        </span>\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"item__overview\">\r\n                    <span>{overview}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SingleSlide;","import React, { useEffect } from 'react';\r\nimport './YoutubePlayer.sass';\r\n\r\nconst YoutubePlayer = ({ id }) => {\r\n\r\n    useEffect(() => {\r\n        // On mount, check to see if the API script is already loaded\r\n        if (!window.YT) { // If not, load the script asynchronously\r\n            const tag = document.createElement('script');\r\n            tag.src = 'https://www.youtube.com/iframe_api';\r\n\r\n            // onYouTubeIframeAPIReady will load the video after the script is loaded\r\n            window.onYouTubeIframeAPIReady = loadVideo;\r\n\r\n            const firstScriptTag = document.getElementsByTagName('script')[0];\r\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n        } else { // If script is already there, load the video directly\r\n            loadVideo();\r\n        }\r\n    }, []);\r\n\r\n    const loadVideo = () => {\r\n        // the Player object is created uniquely based on the id in props\r\n        let player = new window.YT.Player(`youtube-player-${id}`, {\r\n            videoId: id,\r\n            height: \"100%\",\r\n            width: \"100%\",\r\n            autoplay: 1,\r\n            modestbranding: 1,\r\n            rel: 0,\r\n            showinfo: 0,\r\n            playsinline: 1,\r\n            events: {\r\n                onReady: onPlayerReady,\r\n            },\r\n        });\r\n    };\r\n\r\n    const onPlayerReady = event => {\r\n        event.target.setVolume(100);\r\n        event.target.playVideo();\r\n    };\r\n\r\n    return <div id={`youtube-player-${id}`} />;\r\n}\r\n\r\nexport default YoutubePlayer;","import React, { useRef } from 'react';\r\nimport './VideoPopup.sass';\r\nimport YoutubePlayer from '../YoutubePlayer/YoutubePlayer';\r\n\r\nconst VideoPopup = ({ currTrailerUrl, setShowPopup }) => {\r\n    const videoPopupContentRef = useRef();\r\n\r\n    const closePopup = (e) => {\r\n        if (videoPopupContentRef.current.contains(e.target)) {\r\n            return;\r\n        }\r\n        setShowPopup(false);\r\n    }\r\n    \r\n    return (\r\n        <div className='video-popup' onClick={closePopup} >\r\n            <span className='video-popup__content' ref={videoPopupContentRef}>\r\n                <div className=\"video-popup__media\">\r\n                    <YoutubePlayer id={currTrailerUrl} />\r\n                </div>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoPopup;","import React, { useState, useEffect } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Swiper from 'swiper';\r\n\r\nimport 'swiper/dist/css/swiper.css';\r\nimport './Slider.sass';\r\n\r\nimport SingleSlide from './SingleSlide/SingleSlide';\r\nimport VideoPopup from '../VideoPopup/VideoPopup';\r\n\r\nconst Slider = ({ movies, moviesAreSorted, onInit }) => {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const [currTrailerId, setCurrTrailerId] = useState('');\r\n\r\n    const initSlider = () => {\r\n        new Swiper('.swiper-container', {\r\n            effect: 'coverflow',\r\n            centeredSlides: true,\r\n            slidesPerView: 'auto',\r\n            mousewheel: {\r\n                eventsTarged: '.item__img',\r\n            },\r\n            keyboard: true,\r\n            slideToClickedSlide: true,\r\n            //autoHeight: true,\r\n            scrollbar: {\r\n                el: '.swiper-scrollbar',\r\n                draggable: true,\r\n                //hide: true,\r\n              },\r\n            coverflowEffect: {\r\n                rotate: 20,\r\n                stretch: 0,\r\n                depth: 100,\r\n                modifier: 1,\r\n                slideShadows : false, // Done using CSS\r\n            },\r\n            on: {\r\n                init: () => {\r\n                    onInit(true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (moviesAreSorted) {\r\n             initSlider();\r\n        }\r\n    }, [moviesAreSorted])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"swiper-container\">\r\n                <div className=\"swiper-scrollbar\" />\r\n                <div className=\"swiper-wrapper\">\r\n                    {moviesAreSorted &&\r\n                        movies.map((item) => (\r\n                            <SingleSlide \r\n                                key={item.id} \r\n                                movie={item} \r\n                                setShowPopup={setShowPopup} \r\n                                setCurrTrailerId={setCurrTrailerId} \r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <CSSTransition\r\n                in={showPopup && currTrailerId.length > 0}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                mountOnEnter\r\n                unmountOnExit\r\n            >\r\n                <VideoPopup \r\n                    currTrailerUrl={currTrailerId} \r\n                    setShowPopup={setShowPopup} \r\n                />\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport './ErrorFallback.sass';\r\nimport ErrorIcon from '../assets/img/emojii-facepalm.png'\r\n\r\nconst ErrorFallback = () => {\r\n    return (\r\n        <div className=\"error-fallback\">\r\n            <div className=\"error-fallback__content\">\r\n            <span className=\"error-fallback__content-text\">\r\n                Что-то не завелось <img src={ErrorIcon} className=\"error-fallback__content-icon\" alt=\"Error icon\" />\r\n            </span>\r\n            <span className=\"error-fallback__content-text\">Попробуйте перезагрузить страницу</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorFallback;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport getNowPlaying from './services/getNowPlaying';\r\nimport getTMDbInfo from './services/getTMDbInfo';\r\nimport getOMDbInfo from './services/getOMDbInfo';\r\nimport sortByRating from './services/sortByRating';\r\n\r\nimport Preloader from \"./Preloader/Preloader\";\r\nimport Slider from './Slider/Slider';\r\nimport ErrorFallback from './ErrorFallback/ErrorFallback';\r\nimport CountrySelect from './CountrySelect/CountrySelect';\r\nimport LanguageSelect from './LanguageSelect/LanguageSelect';\r\n\r\nimport './App.sass';\r\n\r\nconst App = () => {\r\n    const [ movies, setMovies ] = useState([]);\r\n    const [ nowPlayingReceived, setNowPlayingReceived ] = useState(false);\r\n    const [ TMDbInfoReceived, setTMDbInfoReceived ] = useState(false);\r\n    const [ OMDbInfoReceived, setOMDbInfoReceived ] = useState(false);\r\n    const [ moviesAreSorted, setMoviesAreSorted ] = useState(false);\r\n    const [ sliderInited, setSliderInited ] = useState(false);\r\n    const [ answerReceived, setAnswerReceived ] = useState(false);\r\n    const [ contentIsLoaded, setContentIsLoaded ] = useState(false);\r\n    const [ region, setRegion ] = useState('UA');\r\n    const [ language, setLanguage ] = useState('ru');\r\n\r\n    const didMount = useRef(false);\r\n\r\n    useEffect(() => {\r\n        getNowPlaying(region, language, setMovies, setNowPlayingReceived, setAnswerReceived);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (didMount.current) {\r\n            setAnswerReceived(false);\r\n            setContentIsLoaded(false);\r\n            setMovies([]);\r\n            setNowPlayingReceived(false);\r\n            setTMDbInfoReceived(false);\r\n            setOMDbInfoReceived(false);\r\n            setMoviesAreSorted(false);\r\n            setSliderInited(false);\r\n            \r\n            getNowPlaying(region, language, setMovies, setNowPlayingReceived, setAnswerReceived);\r\n        }\r\n        else {\r\n            didMount.current = true;\r\n        }\r\n    }, [region, language]);\r\n\r\n    useEffect(()=>{\r\n        if (nowPlayingReceived && movies.length) {\r\n            getTMDbInfo(movies, language, setMovies, setTMDbInfoReceived);\r\n        }\r\n    }, [nowPlayingReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (TMDbInfoReceived && movies.length) {\r\n            getOMDbInfo(movies, setMovies, setOMDbInfoReceived);\r\n        }\r\n    }, [TMDbInfoReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (OMDbInfoReceived && movies.length) {\r\n            const sortedMovies = sortByRating(movies);\r\n            setMovies(sortedMovies);\r\n            setMoviesAreSorted(true);\r\n        }\r\n    }, [OMDbInfoReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (sliderInited && movies.length) {\r\n            setContentIsLoaded(true);\r\n            setAnswerReceived(true);\r\n        }\r\n    }, [sliderInited]);\r\n\r\n    //eslint-disable-next-line\r\n    // useEffect(()=>{\r\n    //     console.log('-------------------------------------');\r\n    //     console.log('nowPlayingReceived: ',nowPlayingReceived);\r\n    //     console.log('TMDbInfoReceived: ',TMDbInfoReceived);\r\n    //     console.log('OMDbInfoReceived: ',OMDbInfoReceived);\r\n    //     console.log('moviesAreSorted: ',moviesAreSorted);\r\n    //     console.log('contentIsLoaded: ',contentIsLoaded);\r\n    //     console.log('answerReceived: ',answerReceived);\r\n    //     console.log('sliderInited: ',sliderInited);\r\n    //     console.log('didMount.current: ', didMount.current);\r\n    // })\r\n\r\n    return (\r\n        <>\r\n            <div className={`content ${contentIsLoaded && answerReceived ? 'content--visible' : ''}`}>\r\n\r\n                {/* <CountrySelect onSelect={setRegion} />\r\n                <LanguageSelect onSelect={setLanguage} /> */}\r\n\r\n                <div className=\"content__credentials\">\r\n                    <p>Made by Vladyslav Klymenko</p>\r\n                    <a href=\"https://www.linkedin.com/in/vladklymenko/\">linkedIn</a>\r\n                    &nbsp;\r\n                    <a href=\"mailto:drkleem@gmail.com\">drkleem@gmail.com</a>\r\n                </div>\r\n\r\n                <Slider \r\n                    movies={movies} \r\n                    moviesAreSorted={moviesAreSorted} \r\n                    onInit={setSliderInited} \r\n                />\r\n            </div>\r\n\r\n            <CSSTransition\r\n                in={!contentIsLoaded && !answerReceived}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                unmountOnExit\r\n            >\r\n                <Preloader />\r\n            </CSSTransition>\r\n\r\n            <CSSTransition\r\n                in={!contentIsLoaded && answerReceived}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                mountOnEnter\r\n                unmountOnExit\r\n            >\r\n                <ErrorFallback />\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n    \r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}