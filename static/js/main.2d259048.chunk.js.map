{"version":3,"sources":["assets/img/empty-poster.png","ajaxRequest.js","Slider/SingleSlide/SingleSlide.js","Slider/Slider.js","Preloader/Preloader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ajaxRequest","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","send","onreadystatechange","this","readyState","DONE","responseParsed","JSON","parse","responseText","SingleSlide","genreList","react_default","a","createElement","Fragment","props","movie","genres","map","item","key","id","className","concat","name","posterSrc","poster","emptyPoster","title","year","src","alt","imdbRating","isNaN","metascore","trailer_url","length","href","director","actors","overview","React","Component","Slider","movies","Slider_SingleSlide_SingleSlide","Preloader","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","contentLoading","movieItemsTMDb","TMDbAPI","OMDbAPI","that","getNowPlaying","_getNowPlaying","apply","arguments","asyncToGenerator","regenerator_default","mark","_callee2","requestTMDb","wrap","_context2","prev","next","all","then","_ref2","_ref3","slicedToArray","nowPlayingPage1","nowPlayingPage2","nowPlayingPage1Results","results","nowPlayingPage2Results","forEach","poster_path","push","stop","getTMDbInfo","_getTMDbInfo","_callee3","i","currTMDbId","movieInfo","trailers","trailerUrl","lastTrailer","_context3","sent","videos","site","imdb_id","getOMDbInfo","_getOMDbInfo","_callee4","currIMDbId","requestOMDb","_context4","Director","Actors","Metascore","Year","sortByRating","_sortByRating","_callee5","_context5","sort","b","updateState","_updateState","_callee6","_context6","abrupt","stringify","setState","initSlider","_initSlider","_callee7","_context7","Swiper","effect","centeredSlides","slidesPerView","mousewheel","keyboard","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","on","init","_callee","_context","CSSTransition","in","timeout","classNames","unmountOnExit","src_Preloader_Preloader","src_Slider_Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d259048.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","export function ajaxRequest(url) {\r\n    return new Promise(function(resolve, reject) {\r\n        let xhr = new XMLHttpRequest();\r\n\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.send();\r\n\r\n        xhr.onreadystatechange = function() {\r\n            if (this.readyState === this.DONE) {\r\n                const responseParsed = JSON.parse(this.responseText);\r\n                resolve(responseParsed);\r\n            }\r\n        };\r\n    });\r\n}\r\n","import React from 'react';\r\nimport './SingleSlide.sass';\r\nimport emptyPoster from '../../assets/img/empty-poster.png';\r\n\r\nclass SingleSlide extends React.Component {\r\n\r\n    render() {\r\n        const genreList = (\r\n            <>\r\n                {this.props.movie.genres.map((item) =>\r\n                    <div key={item.id} className=\"item__genre-element\">\r\n                        <div className={`item__genre-icon item__genre-icon--${item.id}`} />\r\n                        <div className=\"item__genre-name\" >{item.name}</div>\r\n                    </div>\r\n                )}\r\n            </>\r\n        );\r\n        const posterSrc = this.props.movie.poster !== null ? (\r\n                this.props.movie.poster\r\n            ) : (\r\n                emptyPoster\r\n            );\r\n        return (\r\n            <div className=\"swiper-slide item\">\r\n                <div className=\"item__description item__title\">\r\n                    <span>{`${this.props.movie.title} (${this.props.movie.year})`}</span>\r\n                </div>\r\n\r\n                <div className=\"item__img\">\r\n                    <img src={posterSrc} alt=\"Poster\" />\r\n\r\n                    <div className=\"item__description item__marks\">\r\n                        <div className=\" item__sidebar item__sidebar--imdb\">\r\n                            <span className=\"item__sidebar-title\">IMDb</span>\r\n                            <span className=\"item__sidebar-number\">{this.props.movie.imdbRating}</span>\r\n                        </div>\r\n\r\n                        {!isNaN(this.props.movie.metascore) &&\r\n                            <div className=\"item__sidebar item__sidebar--metascore\">\r\n                                <span className=\"item__sidebar-title item__sidebar-title--sm\">Критики</span>\r\n                                <span className=\"item__sidebar-number\">{this.props.movie.metascore + '%'}</span>\r\n                            </div>\r\n                        }\r\n\r\n                        {this.props.movie.trailer_url.length > 0 &&\r\n                            <div className=\"item__sidebar item__sidebar--trailer\">\r\n                                <span className=\"item__sidebar-title item__sidebar-title--sm\">Трейлер</span>\r\n                                <span className=\"item__sidebar-icon item__sidebar-icon--youtube\"/>\r\n                                <a className=\"item__sidebar-link\" href={this.props.movie.trailer_url}>Youtube</a>\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"item__genre\">\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--sm\">\r\n                                {genreList}\r\n                            </div>\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--lg\">\r\n                                {genreList}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"item__description item__bottom\">\r\n\r\n                    <div className=\"item__cast\">\r\n                        <span className=\"item__director\">\r\n                            Режиссер: <span>{this.props.movie.director}</span>\r\n                        </span>\r\n                        <span className=\"item__actors\">\r\n                            В ролях: <span>{this.props.movie.actors}</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"item__overview\">\r\n                        <span>{this.props.movie.overview}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleSlide;\r\n","import React from 'react';\r\nimport 'swiper/dist/css/swiper.css';\r\nimport './Slider.sass';\r\n\r\nimport SingleSlide from './SingleSlide/SingleSlide';\r\n\r\nclass Slider extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"swiper-container\">\r\n                <div className=\"swiper-wrapper\">\r\n                    {this.props.movies.map((item) => (\r\n                        <SingleSlide key={item.id} movie={item}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport './Preloader.sass';\r\n\r\nclass Preloader extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loader\">\r\n                <div className=\"loader__spinner\">\r\n                    <div className=\"loader__spinner-square\"  />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n","import React, {Component} from 'react';\r\nimport { ajaxRequest } from './ajaxRequest';\r\n\r\nimport './App.sass';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Swiper from 'swiper';\r\nimport Slider from './Slider/Slider';\r\nimport Preloader from \"./Preloader/Preloader\";\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            movies: [],\r\n            contentLoading: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let movieItemsTMDb = [];\r\n        const TMDbAPI = \"3b07521ea25bf66106a9525b3054c8e9\";\r\n        const OMDbAPI = \"55018c43\";\r\n        const that = this;\r\n\r\n        async function getNowPlaying() {\r\n            const requestTMDb = `https://api.themoviedb.org/3/movie/now_playing?region=UA&language=ru-RU&api_key=${TMDbAPI}`;\r\n            const posterPath = `https://image.tmdb.org/t/p/original`; // lower resolution: https://image.tmdb.org/t/p/w370_and_h556_bestv2\r\n\r\n            await Promise.all([ajaxRequest(requestTMDb), ajaxRequest(`${requestTMDb}&page=2`)])\r\n                .then(([nowPlayingPage1, nowPlayingPage2]) => {\r\n                    let nowPlayingPage1Results = nowPlayingPage1.results;\r\n                    let nowPlayingPage2Results = nowPlayingPage2.results;\r\n                    let nowPlayingResults = nowPlayingPage1Results.concat(nowPlayingPage2Results);\r\n\r\n                    nowPlayingResults.forEach((item) => {\r\n                        if (item.poster_path === null) {\r\n                            item.poster = null;\r\n                        }\r\n                        else {\r\n                            item.poster = posterPath + item.poster_path;\r\n                        }\r\n\r\n                        movieItemsTMDb.push(item);\r\n                    });\r\n                });\r\n        }\r\n\r\n        async function getTMDbInfo() {\r\n            for (let i = 0; i < movieItemsTMDb.length; i++) {\r\n                let currTMDbId = movieItemsTMDb[i].id;\r\n                let requestTMDb = `https://api.themoviedb.org/3/movie/${currTMDbId}?api_key=${TMDbAPI}&append_to_response=external_ids,videos&language=ru-RU`;\r\n\r\n                const movieInfo = await ajaxRequest(requestTMDb);\r\n\r\n                let trailers = movieInfo.videos.results,\r\n                    trailerUrl = '';\r\n                if (trailers.length > 0) {\r\n                    let lastTrailer = trailers[trailers.length - 1];\r\n                    if (lastTrailer.site === \"YouTube\") {\r\n                        trailerUrl = `https://www.youtube.com/watch?v=${lastTrailer.key}`;\r\n                    }\r\n                }\r\n\r\n                movieItemsTMDb[i].imdb_id = movieInfo.imdb_id;\r\n                movieItemsTMDb[i].trailer_url = trailerUrl;\r\n                movieItemsTMDb[i].genres = movieInfo.genres;\r\n            }\r\n\r\n        }\r\n\r\n        async function getOMDbInfo() {\r\n            for (let i = 0; i < movieItemsTMDb.length; i++) {\r\n                let currIMDbId = movieItemsTMDb[i].imdb_id;\r\n                let requestOMDb = `https://www.omdbapi.com/?i=${currIMDbId}&apikey=${OMDbAPI}`;\r\n\r\n                const movieInfo = await ajaxRequest(requestOMDb);\r\n\r\n                if (isNaN(movieInfo.imdbRating)) { // may be \"N/A\"\r\n                    movieInfo.imdbRating = '-';\r\n                }\r\n\r\n                movieItemsTMDb[i].imdbRating = movieInfo.imdbRating;\r\n                movieItemsTMDb[i].director = movieInfo.Director;\r\n                movieItemsTMDb[i].actors = movieInfo.Actors;\r\n                movieItemsTMDb[i].metascore = movieInfo.Metascore; // may be \"N/A\"\r\n                movieItemsTMDb[i].year = movieInfo.Year;\r\n            }\r\n        }\r\n\r\n        async function sortByRating() {\r\n            movieItemsTMDb.sort(function (a, b) {\r\n                if (a.imdbRating > b.imdbRating) {\r\n                    return -1;\r\n                }\r\n                else if (a.imdbRating < b.imdbRating) {\r\n                    return 1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        async function updateState() {\r\n            return new Promise(function(resolve, reject) {\r\n                JSON.stringify(movieItemsTMDb);\r\n                resolve(\r\n                    that.setState({movies: movieItemsTMDb})\r\n                )\r\n            });\r\n        }\r\n\r\n        async function initSlider() {\r\n            return new Promise(function(resolve, reject) {\r\n                    new Swiper('.swiper-container', {\r\n                        effect: 'coverflow',\r\n                        centeredSlides: true,\r\n                        slidesPerView: 'auto',\r\n                        mousewheel: true,\r\n                        keyboard: true,\r\n                        coverflowEffect: {\r\n                            rotate: 20,\r\n                            stretch: 0,\r\n                            depth: 100,\r\n                            modifier: 1,\r\n                            slideShadows : true,\r\n                        },\r\n                        on: {\r\n                            init: function() {\r\n                                resolve(\r\n                                    that.setState({contentLoading: false})\r\n                                )\r\n                            }\r\n                        }\r\n                    });\r\n            });\r\n        }\r\n\r\n        (async function(){\r\n            await getNowPlaying();\r\n            await getTMDbInfo();\r\n            await getOMDbInfo();\r\n            await sortByRating();\r\n            await updateState();\r\n            await initSlider();\r\n        })();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={this.state.contentLoading}\r\n                    timeout={500}\r\n                    classNames=\"animation\"\r\n                    unmountOnExit\r\n                >\r\n                    <Preloader/>\r\n                </CSSTransition>\r\n\r\n                <CSSTransition\r\n                    in={!this.state.contentLoading}\r\n                    timeout={1000}\r\n                    classNames=\"animation\"\r\n                >\r\n                    <>\r\n                        <div className=\"content\">\r\n                            <div className=\"credentials\">\r\n                                <p>Made by Vladyslav Klymenko</p>\r\n                                <a href=\"https://www.linkedin.com/in/vladklymenko/\">LinkedIn</a>\r\n                                &nbsp;\r\n                                <a href=\"mailto:drkleem@gmail.com\">drkleem@gmail.com</a>\r\n                            </div>\r\n                            <Slider movies={this.state.movies} />\r\n                        </div>\r\n\r\n                    </>\r\n                </CSSTransition>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}