{"version":3,"sources":["assets/img/empty-poster.png","services/ajaxRequest.js","services/getNowPlaying.js","services/getTMDbInfo.js","services/getOMDbInfo.js","Slider/SingleSlide/SingleSlide.js","Slider/Slider.js","Preloader/Preloader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ajaxRequest","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","url","responseText","responseParsed","wrap","_context","prev","next","fetch","method","sent","json","abrupt","t0","console","error","stop","_x","apply","this","arguments","getNowPlaying","apiKey","updateMovies","setFinish","requestTMDb","concat","Promise","all","then","_ref2","slicedToArray","nowPlayingPage1","nowPlayingPage2","nowPlayingPage1Results","results","nowPlayingPage2Results","nowPlayingResults","length","forEach","item","poster_path","poster","getTMDbInfo","_callee2","movies","promises","_context2","map","currMovie","currTMDbId","movieInfo","trailers","trailerUrl","lastTrailer","id","videos","site","key","imdb_id","trailer_url","genres","_x5","updatedMovies","_x2","_x3","_x4","getOMDbInfo","currIMDbId","requestOMDb","isNaN","imdbRating","director","Director","actors","Actors","metascore","Metascore","year","Year","SingleSlide","genreList","react_default","createElement","Fragment","props","movie","className","name","posterSrc","emptyPoster","title","src","alt","href","overview","React","Component","Slider","log","moviesAreSorted","Slider_SingleSlide_SingleSlide","Preloader","App","_useState","useState","_useState2","setMovies","_useState3","_useState4","nowPlayingReceived","setNowPlayingReceived","_useState5","_useState6","TMDbInfoReceived","setTMDbInfoReceived","_useState7","_useState8","OMDbInfoReceived","setOMDbInfoReceived","_useState9","_useState10","setMoviesAreSorted","_useState11","_useState12","contentIsLoaded","setContentIsLoaded","TMDbAPI","useEffect","sortedMovies","sort","b","sortByRating","Swiper","effect","centeredSlides","slidesPerView","mousewheel","keyboard","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","on","init","CSSTransition","in","timeout","classNames","unmountOnExit","src_Preloader_Preloader","src_Slider_Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6e28def.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","const ajaxRequest = async (url) => {\r\n    try {\r\n        const responseText = await fetch(url, { method: 'GET' });\r\n        const responseParsed = await responseText.json();\r\n        return responseParsed;\r\n    }\r\n    catch (error) {\r\n        return console.error('Ajax request error:', error);\r\n    }\r\n}\r\n\r\nexport default ajaxRequest;","import ajaxRequest from './ajaxRequest';\r\n\r\nconst getNowPlaying = (apiKey, updateMovies, setFinish) => {\r\n    const requestTMDb = `https://api.themoviedb.org/3/movie/now_playing?region=UA&language=ru-RU&api_key=${apiKey}`;\r\n    const posterPath = `https://image.tmdb.org/t/p/original`; // lower resolution: https://image.tmdb.org/t/p/w370_and_h556_bestv2\r\n    \r\n    Promise.all([ajaxRequest(requestTMDb), ajaxRequest(`${requestTMDb}&page=2`)])\r\n        .then(([nowPlayingPage1, nowPlayingPage2]) => {\r\n            let nowPlayingPage1Results = nowPlayingPage1.results;\r\n            let nowPlayingPage2Results = nowPlayingPage2.results;\r\n            let nowPlayingResults = nowPlayingPage1Results.concat(nowPlayingPage2Results);\r\n            let apiRequestsLimit = 39; // to avoid TMDb API 40 requests limit\r\n\r\n            if (nowPlayingResults.length > apiRequestsLimit) {\r\n                nowPlayingResults.length = apiRequestsLimit;\r\n            }\r\n\r\n            nowPlayingResults.forEach((item) => {\r\n                if (item.poster_path === null) {\r\n                    item.poster = null;\r\n                }\r\n                else {\r\n                    item.poster = posterPath + item.poster_path;\r\n                }\r\n            });\r\n\r\n            return nowPlayingResults;\r\n        })\r\n        .then((nowPlayingResults) => {\r\n            updateMovies(nowPlayingResults);\r\n        })\r\n        .then(() => {\r\n            setFinish(true);\r\n        });\r\n}\r\n\r\nexport default getNowPlaying;","import ajaxRequest from './ajaxRequest';\r\n\r\nconst getTMDbInfo = async (apiKey, movies, updateMovies, setFinish) => {\r\n\r\n    const promises = await movies.map(async (currMovie) => {\r\n        let currTMDbId = currMovie.id;\r\n        let requestTMDb = `https://api.themoviedb.org/3/movie/${currTMDbId}?api_key=${apiKey}&append_to_response=external_ids,videos&language=ru-RU`;\r\n\r\n        const movieInfo = await ajaxRequest(requestTMDb);\r\n\r\n        let trailers = movieInfo.videos.results,\r\n            trailerUrl = '';\r\n        if (trailers.length > 0) {\r\n            let lastTrailer = trailers[trailers.length - 1];\r\n            if (lastTrailer.site === \"YouTube\") {\r\n                trailerUrl = `https://www.youtube.com/watch?v=${lastTrailer.key}`;\r\n            }\r\n        }\r\n\r\n        currMovie.imdb_id = movieInfo.imdb_id;\r\n        currMovie.trailer_url = trailerUrl;\r\n        currMovie.genres = movieInfo.genres;\r\n\r\n        return currMovie;\r\n    })\r\n\r\n    await Promise.all(promises)\r\n    .then((updatedMovies) => {\r\n        updateMovies(updatedMovies)\r\n    })\r\n    .then(() => {\r\n        setFinish(true)\r\n    });\r\n\r\n}\r\n\r\nexport default getTMDbInfo;","import ajaxRequest from './ajaxRequest';\r\n\r\nconst getOMDbInfo = async (apiKey, movies, updateMovies, setFinish) => {\r\n\r\n    const promises = await movies.map(async (currMovie) => {\r\n        let currIMDbId = currMovie.imdb_id;\r\n        let requestOMDb = `https://www.omdbapi.com/?i=${currIMDbId}&apikey=${apiKey}`;\r\n\r\n        const movieInfo = await ajaxRequest(requestOMDb);\r\n\r\n        if (isNaN(movieInfo.imdbRating)) { // may be \"N/A\"\r\n            movieInfo.imdbRating = '-';\r\n        }\r\n\r\n        currMovie.imdbRating = movieInfo.imdbRating;\r\n        currMovie.director = movieInfo.Director;\r\n        currMovie.actors = movieInfo.Actors;\r\n        currMovie.metascore = movieInfo.Metascore; // may be \"N/A\"\r\n        currMovie.year = movieInfo.Year;\r\n\r\n        return currMovie;\r\n    })\r\n\r\n    await Promise.all(promises)\r\n    .then((updatedMovies) => {\r\n        updateMovies(updatedMovies)\r\n    })\r\n    .then(() => {\r\n        setFinish(true)\r\n    });\r\n    \r\n}\r\n\r\nexport default getOMDbInfo;","import React from 'react';\r\nimport './SingleSlide.sass';\r\nimport emptyPoster from '../../assets/img/empty-poster.png';\r\n\r\nclass SingleSlide extends React.Component {\r\n\r\n    render() {\r\n        const genreList = (\r\n            <>\r\n                {this.props.movie.genres.map((item) =>\r\n                    <div key={item.id} className=\"item__genre-element\">\r\n                        <div className={`item__genre-icon item__genre-icon--${item.id}`} />\r\n                        <div className=\"item__genre-name\" >{item.name}</div>\r\n                    </div>\r\n                )}\r\n            </>\r\n        );\r\n        const posterSrc = this.props.movie.poster !== null ? (\r\n                this.props.movie.poster\r\n            ) : (\r\n                emptyPoster\r\n            );\r\n        return (\r\n            <div className=\"swiper-slide item\">\r\n                <div className=\"item__description item__title\">\r\n                    <span>{`${this.props.movie.title} (${this.props.movie.year})`}</span>\r\n                </div>\r\n\r\n                <div className=\"item__img\">\r\n                    <img src={posterSrc} alt=\"Poster\" />\r\n\r\n                    <div className=\"item__shadow item__shadow--left\" />\r\n                    <div className=\"item__shadow item__shadow--right\" />\r\n\r\n                    <div className=\"item__description item__marks\">\r\n                        <div className=\" item__sidebar item__sidebar--imdb\">\r\n                            <span className=\"item__sidebar-title\">IMDb</span>\r\n                            <span className=\"item__sidebar-number\">{this.props.movie.imdbRating}</span>\r\n                        </div>\r\n\r\n                        {!isNaN(this.props.movie.metascore) &&\r\n                            <div className=\"item__sidebar item__sidebar--metascore\">\r\n                                <span className=\"item__sidebar-title item__sidebar-title--sm\">Критики</span>\r\n                                <span className=\"item__sidebar-number\">{this.props.movie.metascore + '%'}</span>\r\n                            </div>\r\n                        }\r\n\r\n                        {this.props.movie.trailer_url.length > 0 &&\r\n                            <div className=\"item__sidebar item__sidebar--trailer\">\r\n                                <span className=\"item__sidebar-title item__sidebar-title--sm\">Трейлер</span>\r\n                                <span className=\"item__sidebar-icon item__sidebar-icon--youtube\"/>\r\n                                <a className=\"item__sidebar-link\" href={this.props.movie.trailer_url}>Youtube</a>\r\n                            </div>\r\n                        }\r\n\r\n                        <div className=\"item__genre\">\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--sm\">\r\n                                {genreList}\r\n                            </div>\r\n                            <div className=\"item__sidebar item__genre-box item__genre-box--lg\">\r\n                                {genreList}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n                <div className=\"item__description item__bottom\">\r\n\r\n                    <div className=\"item__cast\">\r\n                        <span className=\"item__director\">\r\n                            Режиссер: <span>{this.props.movie.director}</span>\r\n                        </span>\r\n                        <span className=\"item__actors\">\r\n                            В ролях: <span>{this.props.movie.actors}</span>\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"item__overview\">\r\n                        <span>{this.props.movie.overview}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SingleSlide;\r\n","import React from 'react';\r\nimport 'swiper/dist/css/swiper.css';\r\nimport './Slider.sass';\r\n\r\nimport SingleSlide from './SingleSlide/SingleSlide';\r\n\r\nclass Slider extends React.Component {\r\n\r\n    render() {\r\n        console.log(this.props.movies)\r\n        return (\r\n            <div className=\"swiper-container\">\r\n                <div className=\"swiper-wrapper\">\r\n                    {this.props.moviesAreSorted &&\r\n                        this.props.movies.map((item) => (\r\n                            <SingleSlide key={item.id} movie={item}/>\r\n                        ))\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Slider;\r\n","import React from 'react';\r\nimport './Preloader.sass';\r\n\r\nclass Preloader extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loader\">\r\n                <div className=\"loader__spinner\">\r\n                    <div className=\"loader__spinner-square\"  />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preloader;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport Swiper from 'swiper';\r\n\r\nimport getNowPlaying from './services/getNowPlaying';\r\nimport getTMDbInfo from './services/getTMDbInfo';\r\nimport getOMDbInfo from './services/getOMDbInfo';\r\n\r\nimport Slider from './Slider/Slider';\r\nimport Preloader from \"./Preloader/Preloader\";\r\n\r\nimport './App.sass';\r\n\r\nfunction App() {\r\n    const [ movies, setMovies ] = useState([]);\r\n    const [ nowPlayingReceived, setNowPlayingReceived ] = useState(false);\r\n    const [ TMDbInfoReceived, setTMDbInfoReceived ] = useState(false);\r\n    const [ OMDbInfoReceived, setOMDbInfoReceived ] = useState(false);\r\n    const [ moviesAreSorted, setMoviesAreSorted ] = useState(false);\r\n    const [ contentIsLoaded, setContentIsLoaded ] = useState(false);\r\n  \r\n    const TMDbAPI = \"3b07521ea25bf66106a9525b3054c8e9\";\r\n    const OMDbAPI = \"55018c43\";\r\n\r\n    const sortByRating = () => {\r\n        const sortedMovies = [].concat(movies).sort(function (a, b) {\r\n            return a.imdbRating > b.imdbRating ? -1 : 1;\r\n        });\r\n\r\n        setMovies(sortedMovies);\r\n        setMoviesAreSorted(true);\r\n    }\r\n\r\n    const initSlider = () => {\r\n        new Swiper('.swiper-container', {\r\n            effect: 'coverflow',\r\n            centeredSlides: true,\r\n            slidesPerView: 'auto',\r\n            mousewheel: true,\r\n            keyboard: true,\r\n            coverflowEffect: {\r\n                rotate: 20,\r\n                stretch: 0,\r\n                depth: 100,\r\n                modifier: 1,\r\n                slideShadows : false, // Done using CSS\r\n            },\r\n            on: {\r\n                init: function() {\r\n                    setContentIsLoaded(true)\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getNowPlaying(TMDbAPI, setMovies, setNowPlayingReceived);\r\n    }, []);\r\n\r\n    useEffect(()=>{\r\n        if (nowPlayingReceived && movies.length) {\r\n            getTMDbInfo(TMDbAPI, movies, setMovies, setTMDbInfoReceived);\r\n        }\r\n    }, [nowPlayingReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (TMDbInfoReceived && movies.length) {\r\n            getOMDbInfo(OMDbAPI, movies, setMovies, setOMDbInfoReceived);\r\n        }\r\n    }, [TMDbInfoReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (OMDbInfoReceived && movies.length) {\r\n            sortByRating();\r\n        }\r\n    }, [OMDbInfoReceived]);\r\n\r\n    useEffect(()=>{\r\n        if (moviesAreSorted && movies.length) {\r\n            initSlider();\r\n        }\r\n    }, [moviesAreSorted]);\r\n\r\n    // eslint-disable-next-line\r\n    // useEffect(()=>{\r\n    //     console.log('-----------------------------------------------------------------');\r\n    //     console.log('nowPlayingReceived',nowPlayingReceived);\r\n    //     console.log('TMDbInfoReceived',TMDbInfoReceived);\r\n    //     console.log('moviesAreSorted',moviesAreSorted);\r\n    //     console.log(movies);\r\n    //     console.log('nowPlayingReceived',nowPlayingReceived);\r\n    //     console.log('TMDbInfoReceived',TMDbInfoReceived);\r\n    //     console.log('moviesAreSorted',moviesAreSorted);\r\n    // })\r\n\r\n    return (\r\n        <>\r\n            <CSSTransition\r\n                in={!contentIsLoaded}\r\n                timeout={500}\r\n                classNames=\"animation\"\r\n                unmountOnExit\r\n            >\r\n                <Preloader/>\r\n            </CSSTransition>\r\n\r\n            <CSSTransition\r\n                in={contentIsLoaded }\r\n                timeout={1000}\r\n                classNames=\"animation\"\r\n            >\r\n                <div className=\"content\">\r\n                    <div className=\"credentials\">\r\n                        <p>Made by Vladyslav Klymenko</p>\r\n                        <a href=\"https://www.linkedin.com/in/vladklymenko/\">LinkedIn</a>\r\n                        &nbsp;\r\n                        <a href=\"mailto:drkleem@gmail.com\">drkleem@gmail.com</a>\r\n                    </div>\r\n                    <Slider movies={movies} moviesAreSorted={moviesAreSorted} />\r\n                </div>\r\n            </CSSTransition>\r\n        </>\r\n    );\r\n    \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}