{"version":3,"sources":["assets/img/empty-poster.png","ajaxRequest.js","Slider/SingleSlide/SingleSlide.js","Slider/Slider.js","Preloader/Preloader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ajaxRequest","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","send","onreadystatechange","this","readyState","DONE","responseParsed","JSON","parse","responseText","SingleSlide","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","genreList","react_default","a","createElement","Fragment","movie","genres","map","item","key","id","className","concat","name","posterSrc","poster","emptyPoster","title","src","alt","imdbRating","isNaN","metascore","trailer_url","length","href","director","actors","overview","React","Component","Slider","movies","Slider_SingleSlide_SingleSlide","Preloader","App","_this","state","contentLoading","getData","movieItemsTMDb","TMDbAPI","OMDbAPI","that","getNowPlaying","_getNowPlaying","apply","arguments","asyncToGenerator","regenerator_default","mark","_callee2","requestTMDb","wrap","_context2","prev","next","all","then","_ref2","_ref3","slicedToArray","nowPlayingPage1","nowPlayingPage2","nowPlayingPage1Results","results","nowPlayingPage2Results","splice","forEach","poster_path","push","stop","getTMDbInfo","_getTMDbInfo","_callee3","i","currTMDbId","movieInfo","trailers","trailerUrl","lastTrailer","_context3","sent","videos","site","imdb_id","getOMDbInfo","_getOMDbInfo","_callee4","currIMDbId","requestOMDb","_context4","Director","Actors","Metascore","sortByRating","_sortByRating","_callee5","_context5","sort","b","updateState","_updateState","_callee6","_context6","abrupt","stringify","setState","initSlider","_initSlider","_callee7","_context7","Swiper","effect","centeredSlides","slidesPerView","mousewheel","keyboard","coverflowEffect","rotate","stretch","depth","modifier","slideShadows","_callee","_context","CSSTransition","in","timeout","classNames","unmountOnExit","src_Preloader_Preloader","src_Slider_Slider","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4UCAjC,SAASC,EAAYC,GACxB,OAAO,IAAIC,QAAQ,SAASC,EAASC,GACjC,IAAIC,EAAM,IAAIC,eAEdD,EAAIE,KAAK,MAAON,GAAK,GACrBI,EAAIG,OAEJH,EAAII,mBAAqB,WACrB,GAAIC,KAAKC,aAAeD,KAAKE,KAAM,CAC/B,IAAMC,EAAiBC,KAAKC,MAAML,KAAKM,cACvCb,EAAQU,sECkFTI,cAvFX,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,GAAAE,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,KACVQ,0EAKN,IAAMM,EACFC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACKlB,KAAKQ,MAAMW,MAAMC,OAAOC,IAAI,SAACC,GAAD,OACzBP,EAAAC,EAAAC,cAAA,OAAKM,IAAKD,EAAKE,GAAIC,UAAU,uBACzBV,EAAAC,EAAAC,cAAA,OAAKQ,UAAS,sCAAAC,OAAwCJ,EAAKE,MAC3DT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,oBAAqBH,EAAKK,UAKnDC,EAAwC,OAA5B5B,KAAKQ,MAAMW,MAAMU,OAC3B7B,KAAKQ,MAAMW,MAAMU,OAEjBC,IAER,OACIf,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,qBACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,iCACXV,EAAAC,EAAAC,cAAA,YAAOjB,KAAKQ,MAAMW,MAAMY,QAG5BhB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACXV,EAAAC,EAAAC,cAAA,OAAKe,IAAKJ,EAAWK,IAAI,WAEzBlB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,iCACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,sCACXV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,uBAAhB,QACAV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,wBAAwBzB,KAAKQ,MAAMW,MAAMe,cAG3DC,MAAMnC,KAAKQ,MAAMW,MAAMiB,YACrBrB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,0CACXV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,+CAAhB,8CACAV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,wBAAwBzB,KAAKQ,MAAMW,MAAMiB,UAAY,MAI5EpC,KAAKQ,MAAMW,MAAMkB,YAAYC,OAAS,GACnCvB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,wCACXV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,+CAAhB,8CACAV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,mDAChBV,EAAAC,EAAAC,cAAA,KAAGQ,UAAU,qBAAqBc,KAAMvC,KAAKQ,MAAMW,MAAMkB,eAIjEtB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,eACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,qDACVX,GAELC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,qDACVX,MAWjBC,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,kCAEXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,cACXV,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,kBAAhB,qDACcV,EAAAC,EAAAC,cAAA,YAAOjB,KAAKQ,MAAMW,MAAMqB,WAEtCzB,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,gBAAhB,0CACaV,EAAAC,EAAAC,cAAA,YAAOjB,KAAKQ,MAAMW,MAAMsB,UAIzC1B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,kBACXV,EAAAC,EAAAC,cAAA,YAAOjB,KAAKQ,MAAMW,MAAMuB,oBAhFtBC,IAAMC,WCoBjBC,cAjBX,SAAAA,EAAYrC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAA6C,GAAApC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAoC,GAAAhC,KAAAb,KACVQ,0EAIN,OACIO,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,oBACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,kBACVzB,KAAKQ,MAAMsC,OAAOzB,IAAI,SAACC,GAAD,OACnBP,EAAAC,EAAAC,cAAC8B,EAAD,CAAaxB,IAAKD,EAAKE,GAAIL,MAAOG,eAVrCqB,IAAMC,WCaZI,qBAfX,SAAAA,EAAYxC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAgD,GAAAvC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAuC,GAAAnC,KAAAb,KACVQ,0EAIN,OACIO,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,mBACXV,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,oCATXkB,IAAMC,YC4KfK,cAnKX,SAAAA,EAAYzC,GAAO,IAAA0C,EAAA,OAAAzC,OAAAC,EAAA,EAAAD,CAAAT,KAAAiD,IACfC,EAAAzC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAwC,GAAApC,KAAAb,KAAMQ,KACD2C,MAAQ,CACTL,OAAQ,GACRM,gBAAgB,GAEpBF,EAAKG,UANUH,yEAUf,IAAII,EAAiB,GACfC,EAAU,mCACVC,EAAU,WACVC,EAAOzD,KAJP,SAMS0D,IANT,OAAAC,EAAAC,MAAA5D,KAAA6D,WAAA,SAAAF,IAAA,OAAAA,EAAAlD,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KAMN,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAA/C,EAAAmD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACUJ,EADV,mFAAAxC,OAC2G6B,GAD3G,sCAAAa,EAAAE,KAAA,EAIU9E,QAAQ+E,IAAI,CAACjF,EAAY4E,GAAc5E,EAAW,GAAAoC,OAAIwC,EAAJ,cACnDM,KAAK,SAAAC,GAAwC,IAAAC,EAAAjE,OAAAkE,EAAA,EAAAlE,CAAAgE,EAAA,GAAtCG,EAAsCF,EAAA,GAArBG,EAAqBH,EAAA,GACtCI,EAAyBF,EAAgBG,QACzCC,EAAyBH,EAAgBE,QAAQE,QAAQ,EAAE,GACvCH,EAAuBpD,OAAOsD,GAEpCE,QAAQ,SAAC5D,GACE,OAArBA,EAAK6D,YACL7D,EAAKO,OAAS,KAGdP,EAAKO,OAfzB,sCAe+CP,EAAK6D,YAGpC7B,EAAe8B,KAAK9D,OAlBpC,wBAAA8C,EAAAiB,SAAApB,OANML,MAAA5D,KAAA6D,WAAA,SA6BSyB,IA7BT,OAAAC,EAAA3B,MAAA5D,KAAA6D,WAAA,SAAA0B,IAAA,OAAAA,EAAA9E,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KA6BN,SAAAwB,IAAA,IAAAC,EAAAC,EAAAxB,EAAAyB,EAAAC,EAAAC,EAAAC,EAAA,OAAA/B,EAAA/C,EAAAmD,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACamB,EAAI,EADjB,YACoBA,EAAInC,EAAehB,QADvC,CAAAyD,EAAAzB,KAAA,gBAEYoB,EAAapC,EAAemC,GAAGjE,GAC/B0C,EAHZ,sCAAAxC,OAGgEgE,EAHhE,aAAAhE,OAGsF6B,EAHtF,0DAAAwC,EAAAzB,KAAA,EAKgChF,EAAY4E,GAL5C,OAKcyB,EALdI,EAAAC,KAOYJ,EAAWD,EAAUM,OAAOlB,QAC5Bc,EAAa,GACbD,EAAStD,OAAS,GAEO,aADrBwD,EAAcF,EAASA,EAAStD,OAAS,IAC7B4D,OACZL,EAAU,mCAAAnE,OAAsCoE,EAAYvE,MAIpE+B,EAAemC,GAAGU,QAAUR,EAAUQ,QACtC7C,EAAemC,GAAGpD,YAAcwD,EAChCvC,EAAemC,GAAGrE,OAASuE,EAAUvE,OAlB7C,QAC+CqE,IAD/CM,EAAAzB,KAAA,iCAAAyB,EAAAV,SAAAG,OA7BM5B,MAAA5D,KAAA6D,WAAA,SAoDSuC,IApDT,OAAAC,EAAAzC,MAAA5D,KAAA6D,WAAA,SAAAwC,IAAA,OAAAA,EAAA5F,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KAoDN,SAAAsC,IAAA,IAAAb,EAAAc,EAAAC,EAAAb,EAAA,OAAA5B,EAAA/C,EAAAmD,KAAA,SAAAsC,GAAA,cAAAA,EAAApC,KAAAoC,EAAAnC,MAAA,OACamB,EAAI,EADjB,YACoBA,EAAInC,EAAehB,QADvC,CAAAmE,EAAAnC,KAAA,gBAEYiC,EAAajD,EAAemC,GAAGU,QAC/BK,EAHZ,8BAAA9E,OAGwD6E,EAHxD,YAAA7E,OAG6E8B,GAH7EiD,EAAAnC,KAAA,EAKgChF,EAAYkH,GAL5C,OAKcb,EALdc,EAAAT,KAOY7D,MAAMwD,EAAUzD,cAChByD,EAAUzD,WAAa,KAG3BoB,EAAemC,GAAGvD,WAAayD,EAAUzD,WACzCoB,EAAemC,GAAGjD,SAAWmD,EAAUe,SACvCpD,EAAemC,GAAGhD,OAASkD,EAAUgB,OACrCrD,EAAemC,GAAGrD,UAAYuD,EAAUiB,UAdhD,QAC+CnB,IAD/CgB,EAAAnC,KAAA,iCAAAmC,EAAApB,SAAAiB,OApDM1C,MAAA5D,KAAA6D,WAAA,SAsESgD,IAtET,OAAAC,EAAAlD,MAAA5D,KAAA6D,WAAA,SAAAiD,IAAA,OAAAA,EAAArG,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KAsEN,SAAA+C,IAAA,OAAAhD,EAAA/C,EAAAmD,KAAA,SAAA6C,GAAA,cAAAA,EAAA3C,KAAA2C,EAAA1C,MAAA,OACIhB,EAAe2D,KAAK,SAAUjG,EAAGkG,GAC7B,OAAIlG,EAAEkB,WAAagF,EAAEhF,YACT,EAEHlB,EAAEkB,WAAagF,EAAEhF,WACf,EAGA,IATnB,wBAAA8E,EAAA3B,SAAA0B,OAtEMnD,MAAA5D,KAAA6D,WAAA,SAqFSsD,IArFT,OAAAC,EAAAxD,MAAA5D,KAAA6D,WAAA,SAAAuD,IAAA,OAAAA,EAAA3G,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KAqFN,SAAAqD,IAAA,OAAAtD,EAAA/C,EAAAmD,KAAA,SAAAmD,GAAA,cAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,cAAAgD,EAAAC,OAAA,SACW,IAAI/H,QAAQ,SAASC,EAASC,GACjCU,KAAKoH,UAAUlE,GACf7D,EACIgE,EAAKgE,SAAS,CAAC3E,OAAQQ,QAJnC,wBAAAgE,EAAAjC,SAAAgC,OArFMzD,MAAA5D,KAAA6D,WAAA,SA8FS6D,IA9FT,OAAAC,EAAA/D,MAAA5D,KAAA6D,WAAA,SAAA8D,IAAA,OAAAA,EAAAlH,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KA8FN,SAAA4D,IAAA,OAAA7D,EAAA/C,EAAAmD,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,cAAAuD,EAAAN,OAAA,SACW,IAAI/H,QAAQ,SAASC,EAASC,GAC7B,IAAIoI,IAAO,oBAAqB,CAC5BC,OAAQ,YACRC,gBAAgB,EAChBC,cAAe,OACfC,YAAY,EACZC,UAAU,EACVC,gBAAiB,CACbC,OAAQ,GACRC,QAAS,EACTC,MAAO,IACPC,SAAU,EACVC,cAAe,KAGvBhJ,EACIgE,EAAKgE,SAAS,CAACrE,gBAAgB,QAjB/C,wBAAAyE,EAAAxC,SAAAuC,OA9FMhE,MAAA5D,KAAA6D,WAoHNpD,OAAAqD,EAAA,EAAArD,CAAAsD,EAAA/C,EAAAgD,KAAC,SAAA0E,IAAA,OAAA3E,EAAA/C,EAAAmD,KAAA,SAAAwE,GAAA,cAAAA,EAAAtE,KAAAsE,EAAArE,MAAA,cAAAqE,EAAArE,KAAA,EACSZ,IADT,cAAAiF,EAAArE,KAAA,EAESgB,IAFT,cAAAqD,EAAArE,KAAA,EAGS8B,IAHT,cAAAuC,EAAArE,KAAA,EAISuC,IAJT,cAAA8B,EAAArE,KAAA,GAKS6C,IALT,eAAAwB,EAAArE,KAAA,GAMSoD,IANT,yBAAAiB,EAAAtD,SAAAqD,KAADjI,oCAaA,OACIM,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CACIC,GAAI7I,KAAKmD,MAAMC,eACf0F,QAAS,IACTC,WAAW,YACXC,eAAa,GAEbjI,EAAAC,EAAAC,cAACgI,EAAD,OAGJlI,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CACIC,IAAK7I,KAAKmD,MAAMC,eAChB0F,QAAS,IACTC,WAAW,aAEXhI,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,WACXV,EAAAC,EAAAC,cAACiI,EAAD,CAAQpG,OAAQ9C,KAAKmD,MAAML,mBA5JjCF,aCCEuG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1I,EAAAC,EAAAC,cAACyI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvF,KAAK,SAAAwF,GACjCA,EAAaC","file":"static/js/main.896f5eb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty-poster.b9aba793.png\";","export function ajaxRequest(url) {\n    return new Promise(function(resolve, reject) {\n        let xhr = new XMLHttpRequest();\n\n        xhr.open(\"GET\", url, true);\n        xhr.send();\n\n        xhr.onreadystatechange = function() {\n            if (this.readyState === this.DONE) {\n                const responseParsed = JSON.parse(this.responseText);\n                resolve(responseParsed);\n            }\n        };\n    });\n}\n","import React from 'react';\nimport './SingleSlide.sass';\nimport emptyPoster from '../../assets/img/empty-poster.png';\n\nclass SingleSlide extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        //let metascore = isNaN(this.props.movie.metascore) ? '-' : this.props.movie.metascore + '%';\n        const genreList = (\n            <>\n                {this.props.movie.genres.map((item) =>\n                    <div key={item.id} className=\"item__genre-element\">\n                        <div className={`item__genre-icon item__genre-icon--${item.id}`} />\n                        <div className=\"item__genre-name\" >{item.name}</div>\n                    </div>\n                )}\n            </>\n        );\n        const posterSrc = this.props.movie.poster !== null ? (\n                this.props.movie.poster\n            ) : (\n                emptyPoster\n            );\n        return (\n            <div className=\"swiper-slide item\">\n                <div className=\"item__description item__title\">\n                    <span>{this.props.movie.title}</span>\n                </div>\n\n                <div className=\"item__img\">\n                    <img src={posterSrc} alt=\"Poster\" />\n\n                    <div className=\"item__description item__marks\">\n                        <div className=\" item__sidebar item__sidebar--imdb\">\n                            <span className=\"item__sidebar-title\">IMDb</span>\n                            <span className=\"item__sidebar-number\">{this.props.movie.imdbRating}</span>\n                        </div>\n\n                        {!isNaN(this.props.movie.metascore) &&\n                            <div className=\"item__sidebar item__sidebar--metascore\">\n                                <span className=\"item__sidebar-title item__sidebar-title--sm\">Критики</span>\n                                <span className=\"item__sidebar-number\">{this.props.movie.metascore + '%'}</span>\n                            </div>\n                        }\n\n                        {this.props.movie.trailer_url.length > 0 &&\n                            <div className=\"item__sidebar item__sidebar--trailer\">\n                                <span className=\"item__sidebar-title item__sidebar-title--sm\">Трейлер</span>\n                                <span className=\"item__sidebar-icon item__sidebar-icon--youtube\"/>\n                                <a className=\"item__sidebar-link\" href={this.props.movie.trailer_url} />\n                            </div>\n                        }\n\n                        <div className=\"item__genre\">\n                            <div className=\"item__sidebar item__genre-box item__genre-box--sm\">\n                                {genreList}\n                            </div>\n                            <div className=\"item__sidebar item__genre-box item__genre-box--lg\">\n                                {genreList}\n                            </div>\n                        </div>\n\n                    </div>\n\n\n\n                </div>\n\n\n                <div className=\"item__description item__bottom\">\n\n                    <div className=\"item__cast\">\n                        <span className=\"item__director\">\n                            Режиссер: <span>{this.props.movie.director}</span>\n                        </span>\n                        <span className=\"item__actors\">\n                            В ролях: <span>{this.props.movie.actors}</span>\n                        </span>\n                    </div>\n\n                    <div className=\"item__overview\">\n                        <span>{this.props.movie.overview}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SingleSlide;\n","import React from 'react';\nimport 'swiper/dist/css/swiper.css';\nimport './Slider.sass';\n\nimport SingleSlide from './SingleSlide/SingleSlide';\n\nclass Slider extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"swiper-container\">\n                <div className=\"swiper-wrapper\">\n                    {this.props.movies.map((item) => (\n                        <SingleSlide key={item.id} movie={item}/>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Slider;\n","import React from 'react';\nimport './Preloader.sass';\n\nclass Preloader extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div className=\"loader\">\n                <div className=\"loader__spinner\">\n                    <div className=\"loader__spinner-square\"  />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Preloader;\n","import React, {Component} from 'react';\nimport { ajaxRequest } from './ajaxRequest';\n\nimport './App.sass';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Swiper from 'swiper';\nimport Slider from './Slider/Slider';\nimport Preloader from \"./Preloader/Preloader\";\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            contentLoading: true\n        };\n        this.getData();\n    }\n\n    getData() {\n        let movieItemsTMDb = [];\n        const TMDbAPI = \"3b07521ea25bf66106a9525b3054c8e9\";\n        const OMDbAPI = \"55018c43\";\n        const that = this;\n\n        async function getNowPlaying() {\n            const requestTMDb = `https://api.themoviedb.org/3/movie/now_playing?region=UA&language=ru-RU&api_key=${TMDbAPI}`;\n            const posterPath = `https://image.tmdb.org/t/p/original`; // lower resolution: https://image.tmdb.org/t/p/w370_and_h556_bestv2\n\n            await Promise.all([ajaxRequest(requestTMDb), ajaxRequest(`${requestTMDb}&page=2`)])\n                .then(([nowPlayingPage1, nowPlayingPage2]) => {\n                    let nowPlayingPage1Results = nowPlayingPage1.results;\n                    let nowPlayingPage2Results = nowPlayingPage2.results.splice(-1,1); // to avoid maximum limit of 40 requests in API\n                    let nowPlayingResults = nowPlayingPage1Results.concat(nowPlayingPage2Results);\n\n                    nowPlayingResults.forEach((item) => {\n                        if (item.poster_path === null) {\n                            item.poster = null;\n                        }\n                        else {\n                            item.poster = posterPath + item.poster_path;\n                        }\n\n                        movieItemsTMDb.push(item);\n                    });\n                });\n        }\n\n        async function getTMDbInfo() {\n            for (let i = 0; i < movieItemsTMDb.length; i++) {\n                let currTMDbId = movieItemsTMDb[i].id;\n                let requestTMDb = `https://api.themoviedb.org/3/movie/${currTMDbId}?api_key=${TMDbAPI}&append_to_response=external_ids,videos&language=ru-RU`;\n\n                const movieInfo = await ajaxRequest(requestTMDb);\n\n                let trailers = movieInfo.videos.results,\n                    trailerUrl = '';\n                if (trailers.length > 0) {\n                    let lastTrailer = trailers[trailers.length - 1];\n                    if (lastTrailer.site === \"YouTube\") {\n                        trailerUrl = `https://www.youtube.com/watch?v=${lastTrailer.key}`;\n                    }\n                }\n\n                movieItemsTMDb[i].imdb_id = movieInfo.imdb_id;\n                movieItemsTMDb[i].trailer_url = trailerUrl;\n                movieItemsTMDb[i].genres = movieInfo.genres;\n            }\n\n        }\n\n        async function getOMDbInfo() {\n            for (let i = 0; i < movieItemsTMDb.length; i++) {\n                let currIMDbId = movieItemsTMDb[i].imdb_id;\n                let requestOMDb = `https://www.omdbapi.com/?i=${currIMDbId}&apikey=${OMDbAPI}`;\n\n                const movieInfo = await ajaxRequest(requestOMDb);\n\n                if (isNaN(movieInfo.imdbRating)) { // may be \"N/A\"\n                    movieInfo.imdbRating = '-';\n                }\n\n                movieItemsTMDb[i].imdbRating = movieInfo.imdbRating;\n                movieItemsTMDb[i].director = movieInfo.Director;\n                movieItemsTMDb[i].actors = movieInfo.Actors;\n                movieItemsTMDb[i].metascore = movieInfo.Metascore; // may be \"N/A\"\n            }\n        }\n\n        async function sortByRating() {\n            movieItemsTMDb.sort(function (a, b) {\n                if (a.imdbRating > b.imdbRating) {\n                    return -1;\n                }\n                else if (a.imdbRating < b.imdbRating) {\n                    return 1;\n                }\n                else {\n                    return 0;\n                }\n            });\n\n        }\n\n        async function updateState() {\n            return new Promise(function(resolve, reject) {\n                JSON.stringify(movieItemsTMDb);\n                resolve(\n                    that.setState({movies: movieItemsTMDb})\n                )\n            });\n        }\n\n        async function initSlider() {\n            return new Promise(function(resolve, reject) {\n                    new Swiper('.swiper-container', {\n                        effect: 'coverflow',\n                        centeredSlides: true,\n                        slidesPerView: 'auto',\n                        mousewheel: true,\n                        keyboard: true,\n                        coverflowEffect: {\n                            rotate: 20,\n                            stretch: 0,\n                            depth: 100,\n                            modifier: 1,\n                            slideShadows : true,\n                        },\n                    });\n                    resolve(\n                        that.setState({contentLoading: false})\n                    )\n            });\n        }\n\n        (async function(){\n            await getNowPlaying();\n            await getTMDbInfo();\n            await getOMDbInfo();\n            await sortByRating();\n            await updateState();\n            await initSlider();\n        })();\n\n    }\n\n    render() {\n\n        return (\n            <>\n                <CSSTransition\n                    in={this.state.contentLoading}\n                    timeout={500}\n                    classNames=\"animation\"\n                    unmountOnExit\n                >\n                    <Preloader/>\n                </CSSTransition>\n\n                <CSSTransition\n                    in={!this.state.contentLoading}\n                    timeout={1000}\n                    classNames=\"animation\"\n                >\n                    <div className=\"content\">\n                        <Slider movies={this.state.movies} />\n                    </div>\n                </CSSTransition>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}